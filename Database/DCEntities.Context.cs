

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


namespace Database
{

using System;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;

using System.Data.Entity.Core.Objects;
using System.Linq;


public partial class DCEntities : DbContext
{
    public DCEntities()
        : base("name=DCEntities")
    {

    }

    protected override void OnModelCreating(DbModelBuilder modelBuilder)
    {
        throw new UnintentionalCodeFirstException();
    }


    public virtual DbSet<C__MigrationHistory> C__MigrationHistory { get; set; }

    public virtual DbSet<AspNetRole> AspNetRoles { get; set; }

    public virtual DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }

    public virtual DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }

    public virtual DbSet<AspNetUser> AspNetUsers { get; set; }

    public virtual DbSet<MasterBoard> MasterBoards { get; set; }

    public virtual DbSet<MasterBook> MasterBooks { get; set; }

    public virtual DbSet<MasterCategory> MasterCategories { get; set; }

    public virtual DbSet<MasterClass> MasterClasses { get; set; }

    public virtual DbSet<MasterSery> MasterSeries { get; set; }

    public virtual DbSet<MasterSubject> MasterSubjects { get; set; }

    public virtual DbSet<MyLibrary> MyLibraries { get; set; }

    public virtual DbSet<School> Schools { get; set; }

    public virtual DbSet<UserBook> UserBooks { get; set; }

    public virtual DbSet<UserDetail> UserDetails { get; set; }

    public virtual DbSet<UserExcelData> UserExcelDatas { get; set; }

    public virtual DbSet<UserExcelMetaData> UserExcelMetaDatas { get; set; }

    public virtual DbSet<History_UserExcelData> History_UserExcelData { get; set; }

    public virtual DbSet<UserCart> UserCarts { get; set; }

    public virtual DbSet<UserCartItem> UserCartItems { get; set; }

    public virtual DbSet<CartStatus> CartStatus1 { get; set; }

    public virtual DbSet<CustomerCart> CustomerCart { get; set; }

    public virtual DbSet<PaymentDetails> PaymentDetails { get; set; }

    public virtual DbSet<OrderDetails> OrderDetails { get; set; }

    public virtual DbSet<PaymentStatus> PaymentStatus { get; set; }

    public virtual DbSet<Orders> Orders { get; set; }


    [DbFunction("DCEntities", "fun_Category")]
    public virtual IQueryable<fun_Category_Result> fun_Category(Nullable<short> id)
    {

        var idParameter = id.HasValue ?
            new ObjectParameter("id", id) :
            new ObjectParameter("id", typeof(short));


        return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fun_Category_Result>("[DCEntities].[fun_Category](@id)", idParameter);
    }


    [DbFunction("DCEntities", "fun_CategoryAll")]
    public virtual IQueryable<fun_CategoryAll_Result> fun_CategoryAll(Nullable<short> id)
    {

        var idParameter = id.HasValue ?
            new ObjectParameter("id", id) :
            new ObjectParameter("id", typeof(short));


        return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fun_CategoryAll_Result>("[DCEntities].[fun_CategoryAll](@id)", idParameter);
    }


    [DbFunction("DCEntities", "fun_CategoryBook")]
    public virtual IQueryable<fun_CategoryBook_Result> fun_CategoryBook(Nullable<short> id)
    {

        var idParameter = id.HasValue ?
            new ObjectParameter("id", id) :
            new ObjectParameter("id", typeof(short));


        return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fun_CategoryBook_Result>("[DCEntities].[fun_CategoryBook](@id)", idParameter);
    }


    [DbFunction("DCEntities", "fun_CategoryBookCount")]
    public virtual IQueryable<fun_CategoryBookCount_Result> fun_CategoryBookCount(Nullable<short> id)
    {

        var idParameter = id.HasValue ?
            new ObjectParameter("id", id) :
            new ObjectParameter("id", typeof(short));


        return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fun_CategoryBookCount_Result>("[DCEntities].[fun_CategoryBookCount](@id)", idParameter);
    }


    [DbFunction("DCEntities", "fun_CategoryChild")]
    public virtual IQueryable<fun_CategoryChild_Result> fun_CategoryChild(Nullable<short> id)
    {

        var idParameter = id.HasValue ?
            new ObjectParameter("id", id) :
            new ObjectParameter("id", typeof(short));


        return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fun_CategoryChild_Result>("[DCEntities].[fun_CategoryChild](@id)", idParameter);
    }


    [DbFunction("DCEntities", "fun_CategoryHierarchy")]
    public virtual IQueryable<fun_CategoryHierarchy_Result> fun_CategoryHierarchy(Nullable<short> id)
    {

        var idParameter = id.HasValue ?
            new ObjectParameter("id", id) :
            new ObjectParameter("id", typeof(short));


        return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fun_CategoryHierarchy_Result>("[DCEntities].[fun_CategoryHierarchy](@id)", idParameter);
    }


    [DbFunction("DCEntities", "fun_CategoryHierarchyL2")]
    public virtual IQueryable<fun_CategoryHierarchyL2_Result> fun_CategoryHierarchyL2(Nullable<short> id, Nullable<short> parentid)
    {

        var idParameter = id.HasValue ?
            new ObjectParameter("id", id) :
            new ObjectParameter("id", typeof(short));


        var parentidParameter = parentid.HasValue ?
            new ObjectParameter("parentid", parentid) :
            new ObjectParameter("parentid", typeof(short));


        return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fun_CategoryHierarchyL2_Result>("[DCEntities].[fun_CategoryHierarchyL2](@id, @parentid)", idParameter, parentidParameter);
    }


    [DbFunction("DCEntities", "fun_CategoryParent")]
    public virtual IQueryable<fun_CategoryParent_Result> fun_CategoryParent(Nullable<short> id)
    {

        var idParameter = id.HasValue ?
            new ObjectParameter("id", id) :
            new ObjectParameter("id", typeof(short));


        return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fun_CategoryParent_Result>("[DCEntities].[fun_CategoryParent](@id)", idParameter);
    }


    [DbFunction("DCEntities", "GetStudent")]
    public virtual IQueryable<GetStudent_Result> GetStudent(string aspNetUserId)
    {

        var aspNetUserIdParameter = aspNetUserId != null ?
            new ObjectParameter("AspNetUserId", aspNetUserId) :
            new ObjectParameter("AspNetUserId", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetStudent_Result>("[DCEntities].[GetStudent](@AspNetUserId)", aspNetUserIdParameter);
    }


    [DbFunction("DCEntities", "GetStudentLibraryBooks")]
    public virtual IQueryable<GetStudentLibraryBooks_Result> GetStudentLibraryBooks(string aspNetUserId)
    {

        var aspNetUserIdParameter = aspNetUserId != null ?
            new ObjectParameter("AspNetUserId", aspNetUserId) :
            new ObjectParameter("AspNetUserId", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetStudentLibraryBooks_Result>("[DCEntities].[GetStudentLibraryBooks](@AspNetUserId)", aspNetUserIdParameter);
    }


    public virtual int CleanUploadData(string userExcelMetaDataId, string schoolId, ObjectParameter result, ObjectParameter message)
    {

        var userExcelMetaDataIdParameter = userExcelMetaDataId != null ?
            new ObjectParameter("UserExcelMetaDataId", userExcelMetaDataId) :
            new ObjectParameter("UserExcelMetaDataId", typeof(string));


        var schoolIdParameter = schoolId != null ?
            new ObjectParameter("SchoolId", schoolId) :
            new ObjectParameter("SchoolId", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CleanUploadData", userExcelMetaDataIdParameter, schoolIdParameter, result, message);
    }


    public virtual int DeleteCategory(Nullable<long> id, ObjectParameter result, ObjectParameter iImage, ObjectParameter message)
    {

        var idParameter = id.HasValue ?
            new ObjectParameter("Id", id) :
            new ObjectParameter("Id", typeof(long));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteCategory", idParameter, result, iImage, message);
    }


    public virtual ObjectResult<GetSchools_Result> GetSchools(string roleId, Nullable<int> maxRows, Nullable<int> page, Nullable<int> currentRow)
    {

        var roleIdParameter = roleId != null ?
            new ObjectParameter("RoleId", roleId) :
            new ObjectParameter("RoleId", typeof(string));


        var maxRowsParameter = maxRows.HasValue ?
            new ObjectParameter("MaxRows", maxRows) :
            new ObjectParameter("MaxRows", typeof(int));


        var pageParameter = page.HasValue ?
            new ObjectParameter("Page", page) :
            new ObjectParameter("Page", typeof(int));


        var currentRowParameter = currentRow.HasValue ?
            new ObjectParameter("CurrentRow", currentRow) :
            new ObjectParameter("CurrentRow", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSchools_Result>("GetSchools", roleIdParameter, maxRowsParameter, pageParameter, currentRowParameter);
    }


    public virtual ObjectResult<GetSchoolStudents_Result> GetSchoolStudents(string roleId, string schoolId, Nullable<int> maxRows, Nullable<int> page, Nullable<int> currentRow)
    {

        var roleIdParameter = roleId != null ?
            new ObjectParameter("RoleId", roleId) :
            new ObjectParameter("RoleId", typeof(string));


        var schoolIdParameter = schoolId != null ?
            new ObjectParameter("SchoolId", schoolId) :
            new ObjectParameter("SchoolId", typeof(string));


        var maxRowsParameter = maxRows.HasValue ?
            new ObjectParameter("MaxRows", maxRows) :
            new ObjectParameter("MaxRows", typeof(int));


        var pageParameter = page.HasValue ?
            new ObjectParameter("Page", page) :
            new ObjectParameter("Page", typeof(int));


        var currentRowParameter = currentRow.HasValue ?
            new ObjectParameter("CurrentRow", currentRow) :
            new ObjectParameter("CurrentRow", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSchoolStudents_Result>("GetSchoolStudents", roleIdParameter, schoolIdParameter, maxRowsParameter, pageParameter, currentRowParameter);
    }


    public virtual ObjectResult<GetUserBooks_Result> GetUserBooks(string aspNetUserId, Nullable<long> masterClassId, Nullable<long> masterBoardId)
    {

        var aspNetUserIdParameter = aspNetUserId != null ?
            new ObjectParameter("AspNetUserId", aspNetUserId) :
            new ObjectParameter("AspNetUserId", typeof(string));


        var masterClassIdParameter = masterClassId.HasValue ?
            new ObjectParameter("MasterClassId", masterClassId) :
            new ObjectParameter("MasterClassId", typeof(long));


        var masterBoardIdParameter = masterBoardId.HasValue ?
            new ObjectParameter("MasterBoardId", masterBoardId) :
            new ObjectParameter("MasterBoardId", typeof(long));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUserBooks_Result>("GetUserBooks", aspNetUserIdParameter, masterClassIdParameter, masterBoardIdParameter);
    }


    public virtual ObjectResult<GetUsers_Result> GetUsers(string roleId, Nullable<int> maxRows, Nullable<int> page, Nullable<int> currentRow)
    {

        var roleIdParameter = roleId != null ?
            new ObjectParameter("RoleId", roleId) :
            new ObjectParameter("RoleId", typeof(string));


        var maxRowsParameter = maxRows.HasValue ?
            new ObjectParameter("MaxRows", maxRows) :
            new ObjectParameter("MaxRows", typeof(int));


        var pageParameter = page.HasValue ?
            new ObjectParameter("Page", page) :
            new ObjectParameter("Page", typeof(int));


        var currentRowParameter = currentRow.HasValue ?
            new ObjectParameter("CurrentRow", currentRow) :
            new ObjectParameter("CurrentRow", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUsers_Result>("GetUsers", roleIdParameter, maxRowsParameter, pageParameter, currentRowParameter);
    }


    public virtual int InsertUpdateBulkStudent(string userExcelMetaDataId, string schoolId, string createdBy, string iPaddress, ObjectParameter result, ObjectParameter rowcount, ObjectParameter iId, ObjectParameter iImage, ObjectParameter message)
    {

        var userExcelMetaDataIdParameter = userExcelMetaDataId != null ?
            new ObjectParameter("UserExcelMetaDataId", userExcelMetaDataId) :
            new ObjectParameter("UserExcelMetaDataId", typeof(string));


        var schoolIdParameter = schoolId != null ?
            new ObjectParameter("SchoolId", schoolId) :
            new ObjectParameter("SchoolId", typeof(string));


        var createdByParameter = createdBy != null ?
            new ObjectParameter("CreatedBy", createdBy) :
            new ObjectParameter("CreatedBy", typeof(string));


        var iPaddressParameter = iPaddress != null ?
            new ObjectParameter("IPaddress", iPaddress) :
            new ObjectParameter("IPaddress", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateBulkStudent", userExcelMetaDataIdParameter, schoolIdParameter, createdByParameter, iPaddressParameter, result, rowcount, iId, iImage, message);
    }


    public virtual int InsertUpdateBulkStudent_Bp(string userExcelMetaDataId, string schoolId, string createdBy, string iPaddress, ObjectParameter result, ObjectParameter iId, ObjectParameter iImage, ObjectParameter message)
    {

        var userExcelMetaDataIdParameter = userExcelMetaDataId != null ?
            new ObjectParameter("UserExcelMetaDataId", userExcelMetaDataId) :
            new ObjectParameter("UserExcelMetaDataId", typeof(string));


        var schoolIdParameter = schoolId != null ?
            new ObjectParameter("SchoolId", schoolId) :
            new ObjectParameter("SchoolId", typeof(string));


        var createdByParameter = createdBy != null ?
            new ObjectParameter("CreatedBy", createdBy) :
            new ObjectParameter("CreatedBy", typeof(string));


        var iPaddressParameter = iPaddress != null ?
            new ObjectParameter("IPaddress", iPaddress) :
            new ObjectParameter("IPaddress", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateBulkStudent_Bp", userExcelMetaDataIdParameter, schoolIdParameter, createdByParameter, iPaddressParameter, result, iId, iImage, message);
    }


    public virtual int InsertUpdateBulkStudentsBoard(string userExcelMetaDataId, string schoolId, string createdBy, string iPaddress, ObjectParameter result, ObjectParameter message)
    {

        var userExcelMetaDataIdParameter = userExcelMetaDataId != null ?
            new ObjectParameter("UserExcelMetaDataId", userExcelMetaDataId) :
            new ObjectParameter("UserExcelMetaDataId", typeof(string));


        var schoolIdParameter = schoolId != null ?
            new ObjectParameter("SchoolId", schoolId) :
            new ObjectParameter("SchoolId", typeof(string));


        var createdByParameter = createdBy != null ?
            new ObjectParameter("CreatedBy", createdBy) :
            new ObjectParameter("CreatedBy", typeof(string));


        var iPaddressParameter = iPaddress != null ?
            new ObjectParameter("IPaddress", iPaddress) :
            new ObjectParameter("IPaddress", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateBulkStudentsBoard", userExcelMetaDataIdParameter, schoolIdParameter, createdByParameter, iPaddressParameter, result, message);
    }


    public virtual int InsertUpdateBulkStudentsClass(string userExcelMetaDataId, string schoolId, string createdBy, string iPaddress, ObjectParameter result, ObjectParameter message)
    {

        var userExcelMetaDataIdParameter = userExcelMetaDataId != null ?
            new ObjectParameter("UserExcelMetaDataId", userExcelMetaDataId) :
            new ObjectParameter("UserExcelMetaDataId", typeof(string));


        var schoolIdParameter = schoolId != null ?
            new ObjectParameter("SchoolId", schoolId) :
            new ObjectParameter("SchoolId", typeof(string));


        var createdByParameter = createdBy != null ?
            new ObjectParameter("CreatedBy", createdBy) :
            new ObjectParameter("CreatedBy", typeof(string));


        var iPaddressParameter = iPaddress != null ?
            new ObjectParameter("IPaddress", iPaddress) :
            new ObjectParameter("IPaddress", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateBulkStudentsClass", userExcelMetaDataIdParameter, schoolIdParameter, createdByParameter, iPaddressParameter, result, message);
    }


    public virtual int InsertUpdateDeleteMasterBoard(Nullable<long> id, Nullable<long> masterPublisherId, string globalId, string title, Nullable<int> displayOrder, string image, string description, string iPAddress, string aspNetUserId, Nullable<int> status, Nullable<int> action, ObjectParameter result, ObjectParameter iId, ObjectParameter iImage, ObjectParameter message)
    {

        var idParameter = id.HasValue ?
            new ObjectParameter("Id", id) :
            new ObjectParameter("Id", typeof(long));


        var masterPublisherIdParameter = masterPublisherId.HasValue ?
            new ObjectParameter("MasterPublisherId", masterPublisherId) :
            new ObjectParameter("MasterPublisherId", typeof(long));


        var globalIdParameter = globalId != null ?
            new ObjectParameter("GlobalId", globalId) :
            new ObjectParameter("GlobalId", typeof(string));


        var titleParameter = title != null ?
            new ObjectParameter("Title", title) :
            new ObjectParameter("Title", typeof(string));


        var displayOrderParameter = displayOrder.HasValue ?
            new ObjectParameter("DisplayOrder", displayOrder) :
            new ObjectParameter("DisplayOrder", typeof(int));


        var imageParameter = image != null ?
            new ObjectParameter("Image", image) :
            new ObjectParameter("Image", typeof(string));


        var descriptionParameter = description != null ?
            new ObjectParameter("Description", description) :
            new ObjectParameter("Description", typeof(string));


        var iPAddressParameter = iPAddress != null ?
            new ObjectParameter("IPAddress", iPAddress) :
            new ObjectParameter("IPAddress", typeof(string));


        var aspNetUserIdParameter = aspNetUserId != null ?
            new ObjectParameter("AspNetUserId", aspNetUserId) :
            new ObjectParameter("AspNetUserId", typeof(string));


        var statusParameter = status.HasValue ?
            new ObjectParameter("Status", status) :
            new ObjectParameter("Status", typeof(int));


        var actionParameter = action.HasValue ?
            new ObjectParameter("Action", action) :
            new ObjectParameter("Action", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateDeleteMasterBoard", idParameter, masterPublisherIdParameter, globalIdParameter, titleParameter, displayOrderParameter, imageParameter, descriptionParameter, iPAddressParameter, aspNetUserIdParameter, statusParameter, actionParameter, result, iId, iImage, message);
    }


    public virtual int InsertUpdateDeleteMasterClass(Nullable<long> id, Nullable<long> masterPublisherId, string globalId, string title, Nullable<int> displayOrder, string image, string description, string iPAddress, string aspNetUserId, Nullable<int> status, Nullable<int> action, ObjectParameter result, ObjectParameter iId, ObjectParameter iImage, ObjectParameter message)
    {

        var idParameter = id.HasValue ?
            new ObjectParameter("Id", id) :
            new ObjectParameter("Id", typeof(long));


        var masterPublisherIdParameter = masterPublisherId.HasValue ?
            new ObjectParameter("MasterPublisherId", masterPublisherId) :
            new ObjectParameter("MasterPublisherId", typeof(long));


        var globalIdParameter = globalId != null ?
            new ObjectParameter("GlobalId", globalId) :
            new ObjectParameter("GlobalId", typeof(string));


        var titleParameter = title != null ?
            new ObjectParameter("Title", title) :
            new ObjectParameter("Title", typeof(string));


        var displayOrderParameter = displayOrder.HasValue ?
            new ObjectParameter("DisplayOrder", displayOrder) :
            new ObjectParameter("DisplayOrder", typeof(int));


        var imageParameter = image != null ?
            new ObjectParameter("Image", image) :
            new ObjectParameter("Image", typeof(string));


        var descriptionParameter = description != null ?
            new ObjectParameter("Description", description) :
            new ObjectParameter("Description", typeof(string));


        var iPAddressParameter = iPAddress != null ?
            new ObjectParameter("IPAddress", iPAddress) :
            new ObjectParameter("IPAddress", typeof(string));


        var aspNetUserIdParameter = aspNetUserId != null ?
            new ObjectParameter("AspNetUserId", aspNetUserId) :
            new ObjectParameter("AspNetUserId", typeof(string));


        var statusParameter = status.HasValue ?
            new ObjectParameter("Status", status) :
            new ObjectParameter("Status", typeof(int));


        var actionParameter = action.HasValue ?
            new ObjectParameter("Action", action) :
            new ObjectParameter("Action", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateDeleteMasterClass", idParameter, masterPublisherIdParameter, globalIdParameter, titleParameter, displayOrderParameter, imageParameter, descriptionParameter, iPAddressParameter, aspNetUserIdParameter, statusParameter, actionParameter, result, iId, iImage, message);
    }


    public virtual int InsertUpdateDeleteMasterSeries(Nullable<long> id, Nullable<long> masterSubjectId, Nullable<long> masterPublisherId, string globalId, string title, Nullable<int> displayOrder, string image, string description, string iPAddress, string aspNetUserId, Nullable<int> status, Nullable<int> action, ObjectParameter result, ObjectParameter iId, ObjectParameter iImage, ObjectParameter message)
    {

        var idParameter = id.HasValue ?
            new ObjectParameter("Id", id) :
            new ObjectParameter("Id", typeof(long));


        var masterSubjectIdParameter = masterSubjectId.HasValue ?
            new ObjectParameter("MasterSubjectId", masterSubjectId) :
            new ObjectParameter("MasterSubjectId", typeof(long));


        var masterPublisherIdParameter = masterPublisherId.HasValue ?
            new ObjectParameter("MasterPublisherId", masterPublisherId) :
            new ObjectParameter("MasterPublisherId", typeof(long));


        var globalIdParameter = globalId != null ?
            new ObjectParameter("GlobalId", globalId) :
            new ObjectParameter("GlobalId", typeof(string));


        var titleParameter = title != null ?
            new ObjectParameter("Title", title) :
            new ObjectParameter("Title", typeof(string));


        var displayOrderParameter = displayOrder.HasValue ?
            new ObjectParameter("DisplayOrder", displayOrder) :
            new ObjectParameter("DisplayOrder", typeof(int));


        var imageParameter = image != null ?
            new ObjectParameter("Image", image) :
            new ObjectParameter("Image", typeof(string));


        var descriptionParameter = description != null ?
            new ObjectParameter("Description", description) :
            new ObjectParameter("Description", typeof(string));


        var iPAddressParameter = iPAddress != null ?
            new ObjectParameter("IPAddress", iPAddress) :
            new ObjectParameter("IPAddress", typeof(string));


        var aspNetUserIdParameter = aspNetUserId != null ?
            new ObjectParameter("AspNetUserId", aspNetUserId) :
            new ObjectParameter("AspNetUserId", typeof(string));


        var statusParameter = status.HasValue ?
            new ObjectParameter("Status", status) :
            new ObjectParameter("Status", typeof(int));


        var actionParameter = action.HasValue ?
            new ObjectParameter("Action", action) :
            new ObjectParameter("Action", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateDeleteMasterSeries", idParameter, masterSubjectIdParameter, masterPublisherIdParameter, globalIdParameter, titleParameter, displayOrderParameter, imageParameter, descriptionParameter, iPAddressParameter, aspNetUserIdParameter, statusParameter, actionParameter, result, iId, iImage, message);
    }


    public virtual int InsertUpdateDeleteMasterSubject(Nullable<long> id, Nullable<long> masterPublisherId, string globalId, string title, Nullable<int> displayOrder, string image, string description, string iPAddress, string aspNetUserId, Nullable<int> status, Nullable<int> action, ObjectParameter result, ObjectParameter iId, ObjectParameter iImage, ObjectParameter message)
    {

        var idParameter = id.HasValue ?
            new ObjectParameter("Id", id) :
            new ObjectParameter("Id", typeof(long));


        var masterPublisherIdParameter = masterPublisherId.HasValue ?
            new ObjectParameter("MasterPublisherId", masterPublisherId) :
            new ObjectParameter("MasterPublisherId", typeof(long));


        var globalIdParameter = globalId != null ?
            new ObjectParameter("GlobalId", globalId) :
            new ObjectParameter("GlobalId", typeof(string));


        var titleParameter = title != null ?
            new ObjectParameter("Title", title) :
            new ObjectParameter("Title", typeof(string));


        var displayOrderParameter = displayOrder.HasValue ?
            new ObjectParameter("DisplayOrder", displayOrder) :
            new ObjectParameter("DisplayOrder", typeof(int));


        var imageParameter = image != null ?
            new ObjectParameter("Image", image) :
            new ObjectParameter("Image", typeof(string));


        var descriptionParameter = description != null ?
            new ObjectParameter("Description", description) :
            new ObjectParameter("Description", typeof(string));


        var iPAddressParameter = iPAddress != null ?
            new ObjectParameter("IPAddress", iPAddress) :
            new ObjectParameter("IPAddress", typeof(string));


        var aspNetUserIdParameter = aspNetUserId != null ?
            new ObjectParameter("AspNetUserId", aspNetUserId) :
            new ObjectParameter("AspNetUserId", typeof(string));


        var statusParameter = status.HasValue ?
            new ObjectParameter("Status", status) :
            new ObjectParameter("Status", typeof(int));


        var actionParameter = action.HasValue ?
            new ObjectParameter("Action", action) :
            new ObjectParameter("Action", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateDeleteMasterSubject", idParameter, masterPublisherIdParameter, globalIdParameter, titleParameter, displayOrderParameter, imageParameter, descriptionParameter, iPAddressParameter, aspNetUserIdParameter, statusParameter, actionParameter, result, iId, iImage, message);
    }


    public virtual int InsertUpdateDeleteMyLibrary(string id, string masterBookId, string aspNetUserId, string createdBy, Nullable<int> validity, Nullable<System.DateTime> lastDate, Nullable<byte> status, string iPaddress, Nullable<int> action, ObjectParameter result, ObjectParameter iId, ObjectParameter iImage, ObjectParameter message)
    {

        var idParameter = id != null ?
            new ObjectParameter("Id", id) :
            new ObjectParameter("Id", typeof(string));


        var masterBookIdParameter = masterBookId != null ?
            new ObjectParameter("MasterBookId", masterBookId) :
            new ObjectParameter("MasterBookId", typeof(string));


        var aspNetUserIdParameter = aspNetUserId != null ?
            new ObjectParameter("AspNetUserId", aspNetUserId) :
            new ObjectParameter("AspNetUserId", typeof(string));


        var createdByParameter = createdBy != null ?
            new ObjectParameter("CreatedBy", createdBy) :
            new ObjectParameter("CreatedBy", typeof(string));


        var validityParameter = validity.HasValue ?
            new ObjectParameter("Validity", validity) :
            new ObjectParameter("Validity", typeof(int));


        var lastDateParameter = lastDate.HasValue ?
            new ObjectParameter("LastDate", lastDate) :
            new ObjectParameter("LastDate", typeof(System.DateTime));


        var statusParameter = status.HasValue ?
            new ObjectParameter("Status", status) :
            new ObjectParameter("Status", typeof(byte));


        var iPaddressParameter = iPaddress != null ?
            new ObjectParameter("IPaddress", iPaddress) :
            new ObjectParameter("IPaddress", typeof(string));


        var actionParameter = action.HasValue ?
            new ObjectParameter("Action", action) :
            new ObjectParameter("Action", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateDeleteMyLibrary", idParameter, masterBookIdParameter, aspNetUserIdParameter, createdByParameter, validityParameter, lastDateParameter, statusParameter, iPaddressParameter, actionParameter, result, iId, iImage, message);
    }


    public virtual int InsertUpdateDeleteUserBooks(string aspNetUserId, string masterBookId, string createdBy, string iPAddress, Nullable<int> action, ObjectParameter result, ObjectParameter iId, ObjectParameter message)
    {

        var aspNetUserIdParameter = aspNetUserId != null ?
            new ObjectParameter("AspNetUserId", aspNetUserId) :
            new ObjectParameter("AspNetUserId", typeof(string));


        var masterBookIdParameter = masterBookId != null ?
            new ObjectParameter("MasterBookId", masterBookId) :
            new ObjectParameter("MasterBookId", typeof(string));


        var createdByParameter = createdBy != null ?
            new ObjectParameter("CreatedBy", createdBy) :
            new ObjectParameter("CreatedBy", typeof(string));


        var iPAddressParameter = iPAddress != null ?
            new ObjectParameter("IPAddress", iPAddress) :
            new ObjectParameter("IPAddress", typeof(string));


        var actionParameter = action.HasValue ?
            new ObjectParameter("Action", action) :
            new ObjectParameter("Action", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateDeleteUserBooks", aspNetUserIdParameter, masterBookIdParameter, createdByParameter, iPAddressParameter, actionParameter, result, iId, message);
    }


    public virtual int InsertUpdateSchool(string id, string aspNetUserId, string title, string emailId, string logo, string contactNo, string alterNateContactNo, string principle, string principleContactNo, string addressLine1, string addressLine2, string addressLine3, string state, string city, string pincode, string password, string description, string createdBy, Nullable<int> status, Nullable<long> masterBoardId, Nullable<long> strength, string iTIncharge, string iPaddress, Nullable<int> action, ObjectParameter result, ObjectParameter iId, ObjectParameter iImage, ObjectParameter message)
    {

        var idParameter = id != null ?
            new ObjectParameter("Id", id) :
            new ObjectParameter("Id", typeof(string));


        var aspNetUserIdParameter = aspNetUserId != null ?
            new ObjectParameter("AspNetUserId", aspNetUserId) :
            new ObjectParameter("AspNetUserId", typeof(string));


        var titleParameter = title != null ?
            new ObjectParameter("Title", title) :
            new ObjectParameter("Title", typeof(string));


        var emailIdParameter = emailId != null ?
            new ObjectParameter("EmailId", emailId) :
            new ObjectParameter("EmailId", typeof(string));


        var logoParameter = logo != null ?
            new ObjectParameter("Logo", logo) :
            new ObjectParameter("Logo", typeof(string));


        var contactNoParameter = contactNo != null ?
            new ObjectParameter("ContactNo", contactNo) :
            new ObjectParameter("ContactNo", typeof(string));


        var alterNateContactNoParameter = alterNateContactNo != null ?
            new ObjectParameter("AlterNateContactNo", alterNateContactNo) :
            new ObjectParameter("AlterNateContactNo", typeof(string));


        var principleParameter = principle != null ?
            new ObjectParameter("Principle", principle) :
            new ObjectParameter("Principle", typeof(string));


        var principleContactNoParameter = principleContactNo != null ?
            new ObjectParameter("PrincipleContactNo", principleContactNo) :
            new ObjectParameter("PrincipleContactNo", typeof(string));


        var addressLine1Parameter = addressLine1 != null ?
            new ObjectParameter("AddressLine1", addressLine1) :
            new ObjectParameter("AddressLine1", typeof(string));


        var addressLine2Parameter = addressLine2 != null ?
            new ObjectParameter("AddressLine2", addressLine2) :
            new ObjectParameter("AddressLine2", typeof(string));


        var addressLine3Parameter = addressLine3 != null ?
            new ObjectParameter("AddressLine3", addressLine3) :
            new ObjectParameter("AddressLine3", typeof(string));


        var stateParameter = state != null ?
            new ObjectParameter("State", state) :
            new ObjectParameter("State", typeof(string));


        var cityParameter = city != null ?
            new ObjectParameter("City", city) :
            new ObjectParameter("City", typeof(string));


        var pincodeParameter = pincode != null ?
            new ObjectParameter("Pincode", pincode) :
            new ObjectParameter("Pincode", typeof(string));


        var passwordParameter = password != null ?
            new ObjectParameter("Password", password) :
            new ObjectParameter("Password", typeof(string));


        var descriptionParameter = description != null ?
            new ObjectParameter("Description", description) :
            new ObjectParameter("Description", typeof(string));


        var createdByParameter = createdBy != null ?
            new ObjectParameter("CreatedBy", createdBy) :
            new ObjectParameter("CreatedBy", typeof(string));


        var statusParameter = status.HasValue ?
            new ObjectParameter("Status", status) :
            new ObjectParameter("Status", typeof(int));


        var masterBoardIdParameter = masterBoardId.HasValue ?
            new ObjectParameter("MasterBoardId", masterBoardId) :
            new ObjectParameter("MasterBoardId", typeof(long));


        var strengthParameter = strength.HasValue ?
            new ObjectParameter("Strength", strength) :
            new ObjectParameter("Strength", typeof(long));


        var iTInchargeParameter = iTIncharge != null ?
            new ObjectParameter("ITIncharge", iTIncharge) :
            new ObjectParameter("ITIncharge", typeof(string));


        var iPaddressParameter = iPaddress != null ?
            new ObjectParameter("IPaddress", iPaddress) :
            new ObjectParameter("IPaddress", typeof(string));


        var actionParameter = action.HasValue ?
            new ObjectParameter("Action", action) :
            new ObjectParameter("Action", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateSchool", idParameter, aspNetUserIdParameter, titleParameter, emailIdParameter, logoParameter, contactNoParameter, alterNateContactNoParameter, principleParameter, principleContactNoParameter, addressLine1Parameter, addressLine2Parameter, addressLine3Parameter, stateParameter, cityParameter, pincodeParameter, passwordParameter, descriptionParameter, createdByParameter, statusParameter, masterBoardIdParameter, strengthParameter, iTInchargeParameter, iPaddressParameter, actionParameter, result, iId, iImage, message);
    }


    public virtual int InsertUpdateStudent(string id, Nullable<long> masterClassId, Nullable<long> masterBoardId, string schoolId, string name, string rollNo, string session, string contactNo, string address, string emailId, Nullable<System.DateTime> expiyDate, Nullable<int> gender, Nullable<System.DateTime> dOB, string password, string createdBy, Nullable<int> status, string iPaddress, string admissionNo, string accountCode, string parentName, Nullable<int> action, ObjectParameter result, ObjectParameter iId, ObjectParameter iImage, ObjectParameter message)
    {

        var idParameter = id != null ?
            new ObjectParameter("Id", id) :
            new ObjectParameter("Id", typeof(string));


        var masterClassIdParameter = masterClassId.HasValue ?
            new ObjectParameter("MasterClassId", masterClassId) :
            new ObjectParameter("MasterClassId", typeof(long));


        var masterBoardIdParameter = masterBoardId.HasValue ?
            new ObjectParameter("MasterBoardId", masterBoardId) :
            new ObjectParameter("MasterBoardId", typeof(long));


        var schoolIdParameter = schoolId != null ?
            new ObjectParameter("SchoolId", schoolId) :
            new ObjectParameter("SchoolId", typeof(string));


        var nameParameter = name != null ?
            new ObjectParameter("Name", name) :
            new ObjectParameter("Name", typeof(string));


        var rollNoParameter = rollNo != null ?
            new ObjectParameter("RollNo", rollNo) :
            new ObjectParameter("RollNo", typeof(string));


        var sessionParameter = session != null ?
            new ObjectParameter("Session", session) :
            new ObjectParameter("Session", typeof(string));


        var contactNoParameter = contactNo != null ?
            new ObjectParameter("ContactNo", contactNo) :
            new ObjectParameter("ContactNo", typeof(string));


        var addressParameter = address != null ?
            new ObjectParameter("Address", address) :
            new ObjectParameter("Address", typeof(string));


        var emailIdParameter = emailId != null ?
            new ObjectParameter("EmailId", emailId) :
            new ObjectParameter("EmailId", typeof(string));


        var expiyDateParameter = expiyDate.HasValue ?
            new ObjectParameter("ExpiyDate", expiyDate) :
            new ObjectParameter("ExpiyDate", typeof(System.DateTime));


        var genderParameter = gender.HasValue ?
            new ObjectParameter("Gender", gender) :
            new ObjectParameter("Gender", typeof(int));


        var dOBParameter = dOB.HasValue ?
            new ObjectParameter("DOB", dOB) :
            new ObjectParameter("DOB", typeof(System.DateTime));


        var passwordParameter = password != null ?
            new ObjectParameter("Password", password) :
            new ObjectParameter("Password", typeof(string));


        var createdByParameter = createdBy != null ?
            new ObjectParameter("CreatedBy", createdBy) :
            new ObjectParameter("CreatedBy", typeof(string));


        var statusParameter = status.HasValue ?
            new ObjectParameter("Status", status) :
            new ObjectParameter("Status", typeof(int));


        var iPaddressParameter = iPaddress != null ?
            new ObjectParameter("IPaddress", iPaddress) :
            new ObjectParameter("IPaddress", typeof(string));


        var admissionNoParameter = admissionNo != null ?
            new ObjectParameter("AdmissionNo", admissionNo) :
            new ObjectParameter("AdmissionNo", typeof(string));


        var accountCodeParameter = accountCode != null ?
            new ObjectParameter("AccountCode", accountCode) :
            new ObjectParameter("AccountCode", typeof(string));


        var parentNameParameter = parentName != null ?
            new ObjectParameter("ParentName", parentName) :
            new ObjectParameter("ParentName", typeof(string));


        var actionParameter = action.HasValue ?
            new ObjectParameter("Action", action) :
            new ObjectParameter("Action", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateStudent", idParameter, masterClassIdParameter, masterBoardIdParameter, schoolIdParameter, nameParameter, rollNoParameter, sessionParameter, contactNoParameter, addressParameter, emailIdParameter, expiyDateParameter, genderParameter, dOBParameter, passwordParameter, createdByParameter, statusParameter, iPaddressParameter, admissionNoParameter, accountCodeParameter, parentNameParameter, actionParameter, result, iId, iImage, message);
    }


    public virtual int InserUserExcelMetaData(string aspNetUserId, string fileName, string sheetName, string uploadedFileName, Nullable<int> rows, Nullable<int> cols, string fileMetaData, string description, string createdBy, string iPAddress, ObjectParameter userExcelMetaDataId, ObjectParameter result, ObjectParameter message)
    {

        var aspNetUserIdParameter = aspNetUserId != null ?
            new ObjectParameter("AspNetUserId", aspNetUserId) :
            new ObjectParameter("AspNetUserId", typeof(string));


        var fileNameParameter = fileName != null ?
            new ObjectParameter("FileName", fileName) :
            new ObjectParameter("FileName", typeof(string));


        var sheetNameParameter = sheetName != null ?
            new ObjectParameter("SheetName", sheetName) :
            new ObjectParameter("SheetName", typeof(string));


        var uploadedFileNameParameter = uploadedFileName != null ?
            new ObjectParameter("UploadedFileName", uploadedFileName) :
            new ObjectParameter("UploadedFileName", typeof(string));


        var rowsParameter = rows.HasValue ?
            new ObjectParameter("Rows", rows) :
            new ObjectParameter("Rows", typeof(int));


        var colsParameter = cols.HasValue ?
            new ObjectParameter("Cols", cols) :
            new ObjectParameter("Cols", typeof(int));


        var fileMetaDataParameter = fileMetaData != null ?
            new ObjectParameter("FileMetaData", fileMetaData) :
            new ObjectParameter("FileMetaData", typeof(string));


        var descriptionParameter = description != null ?
            new ObjectParameter("Description", description) :
            new ObjectParameter("Description", typeof(string));


        var createdByParameter = createdBy != null ?
            new ObjectParameter("CreatedBy", createdBy) :
            new ObjectParameter("CreatedBy", typeof(string));


        var iPAddressParameter = iPAddress != null ?
            new ObjectParameter("IPAddress", iPAddress) :
            new ObjectParameter("IPAddress", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InserUserExcelMetaData", aspNetUserIdParameter, fileNameParameter, sheetNameParameter, uploadedFileNameParameter, rowsParameter, colsParameter, fileMetaDataParameter, descriptionParameter, createdByParameter, iPAddressParameter, userExcelMetaDataId, result, message);
    }


    public virtual ObjectResult<ReadBook_Result> ReadBook(string aspNetUserId, string bookId)
    {

        var aspNetUserIdParameter = aspNetUserId != null ?
            new ObjectParameter("AspNetUserId", aspNetUserId) :
            new ObjectParameter("AspNetUserId", typeof(string));


        var bookIdParameter = bookId != null ?
            new ObjectParameter("BookId", bookId) :
            new ObjectParameter("BookId", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReadBook_Result>("ReadBook", aspNetUserIdParameter, bookIdParameter);
    }


    public virtual ObjectResult<ReadBooks_Result> ReadBooks(string aspNetUserId)
    {

        var aspNetUserIdParameter = aspNetUserId != null ?
            new ObjectParameter("AspNetUserId", aspNetUserId) :
            new ObjectParameter("AspNetUserId", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReadBooks_Result>("ReadBooks", aspNetUserIdParameter);
    }


    public virtual ObjectResult<SchoolReadBook_Result> SchoolReadBook(string aspNetUserId, string bookId)
    {

        var aspNetUserIdParameter = aspNetUserId != null ?
            new ObjectParameter("AspNetUserId", aspNetUserId) :
            new ObjectParameter("AspNetUserId", typeof(string));


        var bookIdParameter = bookId != null ?
            new ObjectParameter("BookId", bookId) :
            new ObjectParameter("BookId", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SchoolReadBook_Result>("SchoolReadBook", aspNetUserIdParameter, bookIdParameter);
    }


    public virtual ObjectResult<StudentReadBook_Result> StudentReadBook(string aspNetUserId, string bookId)
    {

        var aspNetUserIdParameter = aspNetUserId != null ?
            new ObjectParameter("AspNetUserId", aspNetUserId) :
            new ObjectParameter("AspNetUserId", typeof(string));


        var bookIdParameter = bookId != null ?
            new ObjectParameter("BookId", bookId) :
            new ObjectParameter("BookId", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<StudentReadBook_Result>("StudentReadBook", aspNetUserIdParameter, bookIdParameter);
    }


    public virtual int InsertUpdateDeleteMasterBooks(string id, Nullable<long> masterCategoryId, Nullable<long> masterClassId, Nullable<long> masterSubjectId, Nullable<long> masterSeriesId, Nullable<long> masterBoardId, string title, string author, string iSBN, string edition, string image, string description, string pageTitle, string metaDescription, string ogTitle, string ogDescription, string twitterTitle, string twitterDescription, string keyWords, Nullable<long> parentId, string bannerImage, string serverId, string encriptionKey, string isSize, Nullable<decimal> ebookPrice, Nullable<decimal> printPrice, Nullable<decimal> discount, Nullable<int> colour, Nullable<long> ebookSizeMB, Nullable<int> ebook, Nullable<int> pbook, Nullable<int> audio, Nullable<int> eBookType, string aspNetUserId, Nullable<byte> status, string iPaddress, Nullable<int> action, ObjectParameter result, ObjectParameter iId, ObjectParameter iImage, ObjectParameter message)
    {

        var idParameter = id != null ?
            new ObjectParameter("Id", id) :
            new ObjectParameter("Id", typeof(string));


        var masterCategoryIdParameter = masterCategoryId.HasValue ?
            new ObjectParameter("MasterCategoryId", masterCategoryId) :
            new ObjectParameter("MasterCategoryId", typeof(long));


        var masterClassIdParameter = masterClassId.HasValue ?
            new ObjectParameter("MasterClassId", masterClassId) :
            new ObjectParameter("MasterClassId", typeof(long));


        var masterSubjectIdParameter = masterSubjectId.HasValue ?
            new ObjectParameter("MasterSubjectId", masterSubjectId) :
            new ObjectParameter("MasterSubjectId", typeof(long));


        var masterSeriesIdParameter = masterSeriesId.HasValue ?
            new ObjectParameter("MasterSeriesId", masterSeriesId) :
            new ObjectParameter("MasterSeriesId", typeof(long));


        var masterBoardIdParameter = masterBoardId.HasValue ?
            new ObjectParameter("MasterBoardId", masterBoardId) :
            new ObjectParameter("MasterBoardId", typeof(long));


        var titleParameter = title != null ?
            new ObjectParameter("Title", title) :
            new ObjectParameter("Title", typeof(string));


        var authorParameter = author != null ?
            new ObjectParameter("Author", author) :
            new ObjectParameter("Author", typeof(string));


        var iSBNParameter = iSBN != null ?
            new ObjectParameter("ISBN", iSBN) :
            new ObjectParameter("ISBN", typeof(string));


        var editionParameter = edition != null ?
            new ObjectParameter("Edition", edition) :
            new ObjectParameter("Edition", typeof(string));


        var imageParameter = image != null ?
            new ObjectParameter("Image", image) :
            new ObjectParameter("Image", typeof(string));


        var descriptionParameter = description != null ?
            new ObjectParameter("Description", description) :
            new ObjectParameter("Description", typeof(string));


        var pageTitleParameter = pageTitle != null ?
            new ObjectParameter("PageTitle", pageTitle) :
            new ObjectParameter("PageTitle", typeof(string));


        var metaDescriptionParameter = metaDescription != null ?
            new ObjectParameter("MetaDescription", metaDescription) :
            new ObjectParameter("MetaDescription", typeof(string));


        var ogTitleParameter = ogTitle != null ?
            new ObjectParameter("OgTitle", ogTitle) :
            new ObjectParameter("OgTitle", typeof(string));


        var ogDescriptionParameter = ogDescription != null ?
            new ObjectParameter("OgDescription", ogDescription) :
            new ObjectParameter("OgDescription", typeof(string));


        var twitterTitleParameter = twitterTitle != null ?
            new ObjectParameter("TwitterTitle", twitterTitle) :
            new ObjectParameter("TwitterTitle", typeof(string));


        var twitterDescriptionParameter = twitterDescription != null ?
            new ObjectParameter("TwitterDescription", twitterDescription) :
            new ObjectParameter("TwitterDescription", typeof(string));


        var keyWordsParameter = keyWords != null ?
            new ObjectParameter("KeyWords", keyWords) :
            new ObjectParameter("KeyWords", typeof(string));


        var parentIdParameter = parentId.HasValue ?
            new ObjectParameter("ParentId", parentId) :
            new ObjectParameter("ParentId", typeof(long));


        var bannerImageParameter = bannerImage != null ?
            new ObjectParameter("BannerImage", bannerImage) :
            new ObjectParameter("BannerImage", typeof(string));


        var serverIdParameter = serverId != null ?
            new ObjectParameter("ServerId", serverId) :
            new ObjectParameter("ServerId", typeof(string));


        var encriptionKeyParameter = encriptionKey != null ?
            new ObjectParameter("EncriptionKey", encriptionKey) :
            new ObjectParameter("EncriptionKey", typeof(string));


        var isSizeParameter = isSize != null ?
            new ObjectParameter("isSize", isSize) :
            new ObjectParameter("isSize", typeof(string));


        var ebookPriceParameter = ebookPrice.HasValue ?
            new ObjectParameter("EbookPrice", ebookPrice) :
            new ObjectParameter("EbookPrice", typeof(decimal));


        var printPriceParameter = printPrice.HasValue ?
            new ObjectParameter("PrintPrice", printPrice) :
            new ObjectParameter("PrintPrice", typeof(decimal));


        var discountParameter = discount.HasValue ?
            new ObjectParameter("Discount", discount) :
            new ObjectParameter("Discount", typeof(decimal));


        var colourParameter = colour.HasValue ?
            new ObjectParameter("Colour", colour) :
            new ObjectParameter("Colour", typeof(int));


        var ebookSizeMBParameter = ebookSizeMB.HasValue ?
            new ObjectParameter("EbookSizeMB", ebookSizeMB) :
            new ObjectParameter("EbookSizeMB", typeof(long));


        var ebookParameter = ebook.HasValue ?
            new ObjectParameter("Ebook", ebook) :
            new ObjectParameter("Ebook", typeof(int));


        var pbookParameter = pbook.HasValue ?
            new ObjectParameter("Pbook", pbook) :
            new ObjectParameter("Pbook", typeof(int));


        var audioParameter = audio.HasValue ?
            new ObjectParameter("Audio", audio) :
            new ObjectParameter("Audio", typeof(int));


        var eBookTypeParameter = eBookType.HasValue ?
            new ObjectParameter("EBookType", eBookType) :
            new ObjectParameter("EBookType", typeof(int));


        var aspNetUserIdParameter = aspNetUserId != null ?
            new ObjectParameter("AspNetUserId", aspNetUserId) :
            new ObjectParameter("AspNetUserId", typeof(string));


        var statusParameter = status.HasValue ?
            new ObjectParameter("Status", status) :
            new ObjectParameter("Status", typeof(byte));


        var iPaddressParameter = iPaddress != null ?
            new ObjectParameter("IPaddress", iPaddress) :
            new ObjectParameter("IPaddress", typeof(string));


        var actionParameter = action.HasValue ?
            new ObjectParameter("Action", action) :
            new ObjectParameter("Action", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateDeleteMasterBooks", idParameter, masterCategoryIdParameter, masterClassIdParameter, masterSubjectIdParameter, masterSeriesIdParameter, masterBoardIdParameter, titleParameter, authorParameter, iSBNParameter, editionParameter, imageParameter, descriptionParameter, pageTitleParameter, metaDescriptionParameter, ogTitleParameter, ogDescriptionParameter, twitterTitleParameter, twitterDescriptionParameter, keyWordsParameter, parentIdParameter, bannerImageParameter, serverIdParameter, encriptionKeyParameter, isSizeParameter, ebookPriceParameter, printPriceParameter, discountParameter, colourParameter, ebookSizeMBParameter, ebookParameter, pbookParameter, audioParameter, eBookTypeParameter, aspNetUserIdParameter, statusParameter, iPaddressParameter, actionParameter, result, iId, iImage, message);
    }


    public virtual ObjectResult<USP_BookDetails_Result> USP_BookDetails(string bookId)
    {

        var bookIdParameter = bookId != null ?
            new ObjectParameter("bookId", bookId) :
            new ObjectParameter("bookId", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_BookDetails_Result>("USP_BookDetails", bookIdParameter);
    }


    public virtual ObjectResult<USP_CustomerCartDetails_Result> USP_CustomerCartDetails(string memberId)
    {

        var memberIdParameter = memberId != null ?
            new ObjectParameter("memberId", memberId) :
            new ObjectParameter("memberId", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_CustomerCartDetails_Result>("USP_CustomerCartDetails", memberIdParameter);
    }


    public virtual int OperationOnCartItems(string bookId, string cartId, string userid, string action, ObjectParameter message)
    {

        var bookIdParameter = bookId != null ?
            new ObjectParameter("BookId", bookId) :
            new ObjectParameter("BookId", typeof(string));


        var cartIdParameter = cartId != null ?
            new ObjectParameter("CartId", cartId) :
            new ObjectParameter("CartId", typeof(string));


        var useridParameter = userid != null ?
            new ObjectParameter("Userid", userid) :
            new ObjectParameter("Userid", typeof(string));


        var actionParameter = action != null ?
            new ObjectParameter("Action", action) :
            new ObjectParameter("Action", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("OperationOnCartItems", bookIdParameter, cartIdParameter, useridParameter, actionParameter, message);
    }


    public virtual int USP_InsertUpdateOrderDetails(string mode)
    {

        var modeParameter = mode != null ?
            new ObjectParameter("Mode", mode) :
            new ObjectParameter("Mode", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_InsertUpdateOrderDetails", modeParameter);
    }


    [DbFunction("DCEntities", "GetLibraryBooks")]
    public virtual IQueryable<GetLibraryBooks_Result> GetLibraryBooks(string aspNetUserId)
    {

        var aspNetUserIdParameter = aspNetUserId != null ?
            new ObjectParameter("AspNetUserId", aspNetUserId) :
            new ObjectParameter("AspNetUserId", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetLibraryBooks_Result>("[DCEntities].[GetLibraryBooks](@AspNetUserId)", aspNetUserIdParameter);
    }


    [DbFunction("DCEntities", "GetAllLibraryBooks")]
    public virtual IQueryable<GetAllLibraryBooks_Result> GetAllLibraryBooks(string aspNetUserId)
    {

        var aspNetUserIdParameter = aspNetUserId != null ?
            new ObjectParameter("AspNetUserId", aspNetUserId) :
            new ObjectParameter("AspNetUserId", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetAllLibraryBooks_Result>("[DCEntities].[GetAllLibraryBooks](@AspNetUserId)", aspNetUserIdParameter);
    }


    [DbFunction("DCEntities", "GetSchoolBooks")]
    public virtual IQueryable<GetSchoolBooks_Result> GetSchoolBooks(string aspNetUserId)
    {

        var aspNetUserIdParameter = aspNetUserId != null ?
            new ObjectParameter("AspNetUserId", aspNetUserId) :
            new ObjectParameter("AspNetUserId", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetSchoolBooks_Result>("[DCEntities].[GetSchoolBooks](@AspNetUserId)", aspNetUserIdParameter);
    }


    public virtual ObjectResult<USP_MyOrderDetails_Result> USP_MyOrderDetails(string orderId)
    {

        var orderIdParameter = orderId != null ?
            new ObjectParameter("OrderId", orderId) :
            new ObjectParameter("OrderId", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_MyOrderDetails_Result>("USP_MyOrderDetails", orderIdParameter);
    }


    public virtual ObjectResult<USP_MyOrders_Result> USP_MyOrders(string orderId=null, string userId=null)
    {

        var orderIdParameter = orderId != null ?
            new ObjectParameter("OrderId", orderId) :
            new ObjectParameter("OrderId", typeof(string));


        var userIdParameter = userId != null ?
            new ObjectParameter("UserId", userId) :
            new ObjectParameter("UserId", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_MyOrders_Result>("USP_MyOrders", orderIdParameter, userIdParameter);
    }

}

}

