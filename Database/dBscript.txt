USE [DC]
GO
/****** Object:  User [waterford]    Script Date: 19-06-2023 09:02:49 AM ******/
CREATE USER [waterford] FOR LOGIN [waterford] WITH DEFAULT_SCHEMA=[dbo]
GO
ALTER ROLE [db_owner] ADD MEMBER [waterford]
GO
ALTER ROLE [db_accessadmin] ADD MEMBER [waterford]
GO
/****** Object:  UserDefinedTableType [dbo].[udtStudent]    Script Date: 19-06-2023 09:02:49 AM ******/
CREATE TYPE [dbo].[udtStudent] AS TABLE(
	[Id] [bigint] NULL,
	[AdmissionNo] [nvarchar](500) NULL,
	[AccountCode] [nvarchar](500) NULL,
	[AccountName] [nvarchar](500) NULL,
	[ParentName] [nvarchar](500) NULL,
	[DateOfBirth] [datetime] NULL,
	[Name] [nvarchar](500) NULL,
	[Class] [varchar](200) NULL,
	[RollNo] [varchar](50) NULL,
	[Session] [varchar](50) NULL,
	[MobNo] [varchar](50) NULL,
	[AltMobNo] [varchar](50) NULL,
	[Board] [varchar](500) NULL,
	[Password] [varchar](max) NULL,
	[ContactPerson] [nvarchar](500) NULL,
	[Address] [nvarchar](1000) NULL,
	[City] [nvarchar](500) NULL,
	[State] [nvarchar](500) NULL
)
GO
/****** Object:  UserDefinedFunction [dbo].[fnNameAbbrevation]    Script Date: 19-06-2023 09:02:50 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE  FUNCTION [dbo].[fnNameAbbrevation]( @str NVARCHAR(4000) )    
RETURNS NVARCHAR(2000)    
AS    
BEGIN    
    DECLARE @retval NVARCHAR(2000);    
    SET @str=RTRIM(LTRIM(@str));    
    SET @retval=LEFT(@str,1);    
    
    WHILE CHARINDEX(' ',@str,1)>0 BEGIN    
        SET @str=LTRIM(RIGHT(@str,LEN(@str)-CHARINDEX(' ',@str,1)));    
        SET @retval+=LEFT(@str,1);    
    END    
 if LEN(@retval)=1 and len(@str)>1    
 begin    
 set @retval= @retval+substring(@str,2,1)      
 end    
    
 if LEN(@retval)>2    
 begin    
 set @retval=substring(@retval,1,1)+substring(@retval,LEN(@retval),1)      
 end    
    RETURN Upper(@retval);    
END 

    
GO
/****** Object:  UserDefinedFunction [dbo].[GetSchoolCode]    Script Date: 19-06-2023 09:02:50 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
CREATE FUNCTION [dbo].[GetSchoolCode](@initial varchar(20))  
RETURNS NVARCHAR(128)  
AS  
BEGIN  
 DECLARE @_newid1 NVARCHAR(128),@_newid2 NVARCHAR(128),@_newid3 NVARCHAR(128),@_newid4 NVARCHAR(128),@_newid5 NVARCHAR(128)  
 DECLARE @recordcount bigint  
 SELECT @_newid1=Cast(ABS(CAST(CAST((select new_id from dbo.getNewID) AS VARBINARY) AS INT)) as NVARCHAR(128))   
 SELECT @_newid2=Cast(ABS(CAST(CAST((select new_id from dbo.getNewID) AS VARBINARY) AS INT)) as NVARCHAR(128))   
 SELECT @_newid3=Cast(ABS(CAST(CAST((select new_id from dbo.getNewID) AS VARBINARY) AS INT)) as NVARCHAR(128))   
 SELECT @_newid4=Cast(ABS(CAST(CAST((select new_id from dbo.getNewID) AS VARBINARY) AS INT)) as NVARCHAR(128))   
 SELECT @_newid5=Cast(ABS(CAST(CAST((select new_id from dbo.getNewID) AS VARBINARY) AS INT)) as NVARCHAR(128))   
 DECLARE @Code VARCHAR(200)  
 declare @AlLChars varchar(100) = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'  
 SELECT @Code=RIGHT( LEFT(@AlLChars,ABS(BINARY_CHECKSUM(@_newid1)%35) + 1 ),1) + RIGHT( LEFT(@AlLChars,ABS(BINARY_CHECKSUM(@_newid2)%35) + 1 ),1) +  
 RIGHT( LEFT(@AlLChars,ABS(BINARY_CHECKSUM(@_newid3)%35) + 1 ),1) + RIGHT( LEFT(@AlLChars,ABS(BINARY_CHECKSUM(@_newid4)%35) + 1 ),1) + RIGHT( LEFT(@AlLChars,ABS(BINARY_CHECKSUM(@_newid5)%35) + 1 ),1)  
 set  @Code=@initial+'-'+@Code    
 select @recordcount=count(1) from dbo.School where SchoolCode=@Code  
 if  @recordcount>0  
 begin    
 set @Code = [dbo].[GetSchoolCode](@initial)   
 end    
    RETURN @Code    
END  
  
   
GO
/****** Object:  UserDefinedFunction [dbo].[GetStudentCode]    Script Date: 19-06-2023 09:02:50 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
     
CREATE FUNCTION [dbo].[GetStudentCode](@initial varchar(20))      
RETURNS NVARCHAR(128)      
AS      
BEGIN      
 DECLARE @_newid1 NVARCHAR(128),@_newid2 NVARCHAR(128),@_newid3 NVARCHAR(128),@_newid4 NVARCHAR(128),@_newid5 NVARCHAR(128) ,@_newid6 NVARCHAR(128)     
 DECLARE @recordcount bigint      
 SELECT @_newid1=Cast(ABS(CAST(CAST((select new_id from dbo.getNewID) AS VARBINARY) AS INT)) as NVARCHAR(128))       
 SELECT @_newid2=Cast(ABS(CAST(CAST((select new_id from dbo.getNewID) AS VARBINARY) AS INT)) as NVARCHAR(128))       
 SELECT @_newid3=Cast(ABS(CAST(CAST((select new_id from dbo.getNewID) AS VARBINARY) AS INT)) as NVARCHAR(128))       
 SELECT @_newid4=Cast(ABS(CAST(CAST((select new_id from dbo.getNewID) AS VARBINARY) AS INT)) as NVARCHAR(128))       
 SELECT @_newid5=Cast(ABS(CAST(CAST((select new_id from dbo.getNewID) AS VARBINARY) AS INT)) as NVARCHAR(128))       
 SELECT @_newid6=Cast(ABS(CAST(CAST((select new_id from dbo.getNewID) AS VARBINARY) AS INT)) as NVARCHAR(128))       

 DECLARE @Code VARCHAR(200)      
 declare @AlLChars varchar(100) = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'      
 SELECT @Code=RIGHT( LEFT(@AlLChars,ABS(BINARY_CHECKSUM(@_newid1)%35) + 1 ),1)
 + RIGHT( LEFT(@AlLChars,ABS(BINARY_CHECKSUM(@_newid2)%35) + 1 ),1)     
 +RIGHT( LEFT(@AlLChars,ABS(BINARY_CHECKSUM(@_newid3)%35) + 1 ),1) 
 + RIGHT( LEFT(@AlLChars,ABS(BINARY_CHECKSUM(@_newid4)%35) + 1 ),1) 
 + RIGHT( LEFT(@AlLChars,ABS(BINARY_CHECKSUM(@_newid5)%35) + 1 ),1)
 + RIGHT( LEFT(@AlLChars,ABS(BINARY_CHECKSUM(@_newid6)%35) + 1 ),1)

 set  @Code=@initial+@Code        
 select @recordcount=count(1) from dbo.UserDetail where UserCode=@Code      
 if  @recordcount>0      
 begin        
 set @Code = [dbo].[GetStudentCode](@initial)       
 end        
    RETURN @Code        
END      
GO
/****** Object:  Table [dbo].[__MigrationHistory]    Script Date: 19-06-2023 09:02:50 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[__MigrationHistory](
	[MigrationId] [nvarchar](150) NOT NULL,
	[ContextKey] [nvarchar](300) NOT NULL,
	[Model] [varbinary](max) NOT NULL,
	[ProductVersion] [nvarchar](32) NOT NULL,
 CONSTRAINT [PK_dbo.__MigrationHistory] PRIMARY KEY CLUSTERED 
(
	[MigrationId] ASC,
	[ContextKey] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[AspNetRoles]    Script Date: 19-06-2023 09:02:50 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AspNetRoles](
	[Id] [nvarchar](128) NOT NULL,
	[Name] [nvarchar](256) NOT NULL,
 CONSTRAINT [PK_dbo.AspNetRoles] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[AspNetUserClaims]    Script Date: 19-06-2023 09:02:50 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AspNetUserClaims](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[UserId] [nvarchar](128) NOT NULL,
	[ClaimType] [nvarchar](max) NULL,
	[ClaimValue] [nvarchar](max) NULL,
 CONSTRAINT [PK_dbo.AspNetUserClaims] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
/****** Object:  Table [dbo].[AspNetUserLogins]    Script Date: 19-06-2023 09:02:50 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AspNetUserLogins](
	[LoginProvider] [nvarchar](128) NOT NULL,
	[ProviderKey] [nvarchar](128) NOT NULL,
	[UserId] [nvarchar](128) NOT NULL,
 CONSTRAINT [PK_dbo.AspNetUserLogins] PRIMARY KEY CLUSTERED 
(
	[LoginProvider] ASC,
	[ProviderKey] ASC,
	[UserId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[AspNetUserRoles]    Script Date: 19-06-2023 09:02:50 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AspNetUserRoles](
	[UserId] [nvarchar](128) NOT NULL,
	[RoleId] [nvarchar](128) NOT NULL,
 CONSTRAINT [PK_dbo.AspNetUserRoles] PRIMARY KEY CLUSTERED 
(
	[UserId] ASC,
	[RoleId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[AspNetUsers]    Script Date: 19-06-2023 09:02:50 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AspNetUsers](
	[Id] [nvarchar](128) NOT NULL,
	[FirstName] [nvarchar](max) NULL,
	[LastName] [nvarchar](max) NULL,
	[Gender] [int] NOT NULL,
	[DOB] [datetime] NULL,
	[MobNo] [nvarchar](max) NULL,
	[EmailId] [nvarchar](max) NULL,
	[SecurityQuestion] [nvarchar](max) NULL,
	[SecurityAnswer] [nvarchar](max) NULL,
	[eUserName] [nvarchar](max) NULL,
	[ePassword] [nvarchar](max) NULL,
	[MobValidate] [bit] NOT NULL,
	[EmailValidate] [bit] NOT NULL,
	[LoginMode] [int] NOT NULL,
	[LoginThirdParty] [bit] NOT NULL,
	[LoginSourse] [int] NOT NULL,
	[LastLogin] [datetime] NULL,
	[Image] [nvarchar](max) NULL,
	[dtmCreate] [datetime] NULL,
	[dtmUpdate] [datetime] NULL,
	[dtmDelete] [datetime] NULL,
	[Status] [int] NOT NULL,
	[TimeZone] [nvarchar](max) NULL,
	[AccessLevels] [nvarchar](max) NULL,
	[DisplayOrder] [int] NOT NULL,
	[Email] [nvarchar](256) NULL,
	[EmailConfirmed] [bit] NOT NULL,
	[PasswordHash] [nvarchar](max) NULL,
	[SecurityStamp] [nvarchar](max) NULL,
	[PhoneNumber] [nvarchar](max) NULL,
	[PhoneNumberConfirmed] [bit] NOT NULL,
	[TwoFactorEnabled] [bit] NOT NULL,
	[LockoutEndDateUtc] [datetime] NULL,
	[LockoutEnabled] [bit] NOT NULL,
	[AccessFailedCount] [int] NOT NULL,
	[UserName] [nvarchar](256) NOT NULL,
	[UserExcelMetaDataId] [nvarchar](128) NULL,
	[UniqueId] [nvarchar](128) NULL,
	[FromUpload] [int] NULL,
 CONSTRAINT [PK_dbo.AspNetUsers] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
/****** Object:  Table [dbo].[History_UserExcelData]    Script Date: 19-06-2023 09:02:50 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[History_UserExcelData](
	[Id] [nvarchar](128) NOT NULL,
	[UserExcelMetaDataId] [nvarchar](128) NULL,
	[MasterClassId] [bigint] NULL,
	[MasterBoardId] [bigint] NULL,
	[AspNetUserId] [nvarchar](128) NULL,
	[UpdateUserId] [nvarchar](128) NULL,
	[AdmissionNo] [nvarchar](200) NULL,
	[AccountCode] [nvarchar](200) NULL,
	[AccountName] [nvarchar](500) NULL,
	[ParentName] [nvarchar](500) NULL,
	[DateOfBirth] [datetime] NULL,
	[Name] [nvarchar](500) NULL,
	[Class] [nvarchar](200) NULL,
	[RollNo] [varchar](50) NULL,
	[Session] [varchar](50) NULL,
	[Board] [nvarchar](500) NULL,
	[Password] [nvarchar](max) NULL,
	[NameAbbr] [varchar](500) NULL,
	[UserCode] [varchar](500) NULL,
	[CreateDate] [datetime] NULL,
	[UpdatedDate] [datetime] NULL,
	[CreatedBy] [nvarchar](128) NULL,
	[UpdatedBy] [nvarchar](128) NULL,
	[IPAddress] [varchar](50) NULL,
	[Status] [int] NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[MasterBoard]    Script Date: 19-06-2023 09:02:50 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[MasterBoard](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[GlobalId] [nvarchar](128) NULL,
	[MasterPublisherId] [bigint] NULL,
	[Title] [nvarchar](max) NULL,
	[DisplayOrder] [int] NULL,
	[Image] [varchar](200) NULL,
	[Description] [nvarchar](max) NULL,
	[CreatedDate] [datetime] NULL,
	[UpdatedDate] [datetime] NULL,
	[IPAddress] [varchar](50) NULL,
	[CreatedBy] [nvarchar](128) NULL,
	[UpdatedBy] [nvarchar](128) NULL,
	[Status] [int] NULL,
 CONSTRAINT [PK_MasterBoard] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[MasterBooks]    Script Date: 19-06-2023 09:02:50 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[MasterBooks](
	[Id] [nvarchar](128) NOT NULL,
	[MasterCategoryId] [bigint] NULL,
	[MasterClassId] [bigint] NULL,
	[MasterBoardId] [bigint] NULL,
	[MasterSubjectid] [bigint] NULL,
	[MasterSeriesid] [bigint] NULL,
	[Title] [nvarchar](1000) NULL,
	[Author] [nvarchar](1000) NULL,
	[ISBN] [varchar](50) NULL,
	[Edition] [varchar](50) NULL,
	[Image] [varchar](150) NULL,
	[Description] [nvarchar](max) NULL,
	[PageTitle] [nvarchar](500) NULL,
	[MetaDescription] [nvarchar](1000) NULL,
	[OgTitle] [nvarchar](500) NULL,
	[OgDescription] [nvarchar](1000) NULL,
	[TwitterTitle] [nvarchar](500) NULL,
	[TwitterDescription] [nvarchar](1000) NULL,
	[KeyWords] [nvarchar](1000) NULL,
	[ParentId] [bigint] NULL,
	[ShortCode] [nvarchar](150) NULL,
	[DisplayOrder] [smallint] NULL,
	[BannerImage] [nvarchar](150) NULL,
	[ServerId] [nvarchar](128) NULL,
	[EncriptionKey] [nvarchar](200) NULL,
	[isSize] [varchar](50) NULL,
	[EbookPrice] [decimal](18, 2) NULL,
	[PrintPrice] [decimal](18, 2) NULL,
	[Discount] [decimal](10, 2) NULL,
	[Colour] [int] NULL,
	[EbookSize(MB)] [bigint] NULL,
	[Ebook] [int] NULL,
	[Pbook] [int] NULL,
	[Audio] [int] NULL,
	[EBookType] [int] NULL,
	[CreatedBy] [nvarchar](128) NULL,
	[UpdatedBy] [nvarchar](128) NULL,
	[CreateDate] [datetime] NULL,
	[UpdateDate] [datetime] NULL,
	[Status] [tinyint] NULL,
	[IPaddress] [varchar](20) NULL,
 CONSTRAINT [PK_MasterBooks] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[MasterCategory]    Script Date: 19-06-2023 09:02:50 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[MasterCategory](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[Title] [nvarchar](300) NULL,
	[PageTitle] [nvarchar](500) NULL,
	[MetaDescription] [nvarchar](1000) NULL,
	[OgTitle] [nvarchar](500) NULL,
	[OgDescription] [nvarchar](1000) NULL,
	[TwitterTitle] [nvarchar](500) NULL,
	[TwitterDescription] [nvarchar](1000) NULL,
	[Author] [nvarchar](500) NULL,
	[KeyWords] [nvarchar](1000) NULL,
	[Description] [nvarchar](max) NULL,
	[ParentId] [bigint] NULL,
	[ShortCode] [nvarchar](150) NULL,
	[DisplayOrder] [smallint] NULL,
	[Image] [nvarchar](150) NULL,
	[BannerImage] [nvarchar](150) NULL,
	[CreatedBy] [nvarchar](128) NULL,
	[UpdatedBy] [nvarchar](128) NULL,
	[CreateDate] [datetime] NULL,
	[UpdateDate] [datetime] NULL,
	[Status] [tinyint] NULL,
	[IPaddress] [varchar](20) NULL,
 CONSTRAINT [PK_MasterCategory] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[MasterClass]    Script Date: 19-06-2023 09:02:50 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[MasterClass](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[Title] [nvarchar](max) NULL,
	[DisplayOrder] [int] NULL CONSTRAINT [DF_MasterClass_DisplayOrder]  DEFAULT ((0)),
	[Description] [varchar](max) NOT NULL,
	[CreateDate] [datetime] NOT NULL,
	[UpdatedDate] [datetime] NOT NULL,
	[CreatedBy] [nvarchar](128) NULL,
	[UpdatedBy] [nvarchar](128) NULL,
	[IPAddress] [varchar](50) NOT NULL,
	[Status] [int] NOT NULL,
 CONSTRAINT [PK_MasterClass] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[MasterSeries]    Script Date: 19-06-2023 09:02:50 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[MasterSeries](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[GlobalId] [nvarchar](128) NULL,
	[MasterSubjectId] [bigint] NULL,
	[Title] [nvarchar](max) NULL,
	[DisplayOrder] [int] NULL,
	[Image] [varchar](200) NULL,
	[Description] [nvarchar](max) NULL,
	[CreatedDate] [datetime] NULL,
	[UpdatedDate] [datetime] NULL,
	[IPAddress] [varchar](50) NULL,
	[CreatedBy] [nvarchar](128) NULL,
	[UpdatedBy] [nvarchar](128) NULL,
	[Status] [int] NULL,
 CONSTRAINT [PK_MasterSeries] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[MasterSubject]    Script Date: 19-06-2023 09:02:50 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[MasterSubject](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[MasterPublisherId] [bigint] NULL,
	[GlobalId] [nvarchar](128) NULL,
	[Title] [nvarchar](max) NULL,
	[DisplayOrder] [int] NULL,
	[Image] [varchar](200) NULL,
	[Description] [nvarchar](max) NULL,
	[CreatedDate] [datetime] NULL,
	[UpdatedDate] [datetime] NULL,
	[IPAddress] [varchar](50) NULL,
	[CreatedBy] [nvarchar](128) NULL,
	[UpdatedBy] [nvarchar](128) NULL,
	[Status] [int] NULL,
 CONSTRAINT [PK_MasterSubject] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[MyLibrary]    Script Date: 19-06-2023 09:02:50 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[MyLibrary](
	[Id] [nvarchar](128) NOT NULL,
	[MasterBookId] [nvarchar](128) NULL,
	[AspNetUserId] [nvarchar](128) NULL,
	[CreatedBy] [nvarchar](128) NULL,
	[UpdatedBy] [nvarchar](128) NULL,
	[Validity] [int] NULL,
	[LastDate] [datetime] NULL,
	[CreateDate] [datetime] NULL,
	[UpdateDate] [datetime] NULL,
	[Status] [tinyint] NULL,
	[IPaddress] [varchar](20) NULL,
 CONSTRAINT [PK_MyLibrary] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[School]    Script Date: 19-06-2023 09:02:50 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[School](
	[Id] [nvarchar](128) NOT NULL,
	[AspNetUserId] [nvarchar](128) NULL,
	[MasterBoardId] [bigint] NULL,
	[Title] [nvarchar](1000) NULL,
	[SchoolCode] [nvarchar](50) NULL,
	[Strength] [bigint] NULL,
	[ITIncharge] [nvarchar](200) NULL,
	[EmailId] [nvarchar](200) NULL,
	[Logo] [nvarchar](200) NULL,
	[ContactNo] [nvarchar](50) NULL,
	[AlterNateContactNo] [nvarchar](50) NULL,
	[Principle] [nvarchar](500) NOT NULL,
	[PrincipleContactNo] [nvarchar](50) NULL,
	[AddressLine1] [nvarchar](500) NULL,
	[AddressLine2] [nvarchar](500) NULL,
	[AddressLine3] [nvarchar](500) NULL,
	[State] [nvarchar](500) NULL,
	[City] [nvarchar](500) NULL,
	[Pincode] [nvarchar](10) NULL,
	[Description] [varchar](max) NULL,
	[CreateDate] [datetime] NULL,
	[UpdatedDate] [datetime] NULL,
	[CreatedBy] [nvarchar](128) NULL,
	[UpdatedBy] [nvarchar](128) NULL,
	[IPAddress] [varchar](50) NULL,
	[Status] [int] NULL,
 CONSTRAINT [PK_School] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[UserBooks]    Script Date: 19-06-2023 09:02:50 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[UserBooks](
	[Id] [nvarchar](128) NOT NULL,
	[AspNetUserId] [nvarchar](128) NULL,
	[MasterBookId] [nvarchar](128) NULL,
	[CreatedBy] [nvarchar](128) NULL,
	[UpdatedBy] [nvarchar](128) NULL,
	[CreateDate] [datetime] NULL,
	[UpdateDate] [datetime] NULL,
	[Status] [tinyint] NULL,
	[IPaddress] [varchar](20) NULL,
 CONSTRAINT [PK_UserBooks] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[UserDetail]    Script Date: 19-06-2023 09:02:50 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[UserDetail](
	[UseDetailId] [nvarchar](128) NOT NULL,
	[AspNetUserId] [nvarchar](128) NULL,
	[MasterClassId] [bigint] NULL,
	[MasterBoardId] [bigint] NULL,
	[AdmissionNo] [nvarchar](200) NULL,
	[AccountCode] [nvarchar](200) NULL,
	[ParentName] [nvarchar](500) NULL,
	[DateOfBirth] [datetime] NULL,
	[SchoolId] [nvarchar](128) NULL,
	[UserCode] [nvarchar](200) NULL,
	[Name] [nvarchar](500) NULL,
	[RollNo] [varchar](50) NULL,
	[Session] [varchar](50) NULL,
	[ContactNo] [varchar](50) NULL,
	[Address] [nvarchar](500) NULL,
	[ExpiyDate] [datetime] NULL,
	[CreatedDate] [datetime] NULL,
	[CreatedBy] [nvarchar](128) NULL,
	[UpdatedBy] [nvarchar](128) NULL,
	[IpAddress] [varchar](50) NULL,
 CONSTRAINT [PK_UserDetail] PRIMARY KEY CLUSTERED 
(
	[UseDetailId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[UserExcelData]    Script Date: 19-06-2023 09:02:50 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[UserExcelData](
	[Id] [nvarchar](128) NOT NULL,
	[UserExcelMetaDataId] [nvarchar](128) NULL,
	[MasterClassId] [bigint] NULL,
	[MasterBoardId] [bigint] NULL,
	[AspNetUserId] [nvarchar](128) NULL,
	[UpdateUserId] [nvarchar](128) NULL,
	[AdmissionNo] [nvarchar](200) NULL,
	[AccountCode] [nvarchar](200) NULL,
	[AccountName] [nvarchar](500) NULL,
	[ParentName] [nvarchar](500) NULL,
	[DateOfBirth] [datetime] NULL,
	[Name] [nvarchar](500) NULL,
	[Class] [nvarchar](200) NULL,
	[RollNo] [varchar](50) NULL,
	[Session] [varchar](50) NULL,
	[Board] [nvarchar](500) NULL,
	[Password] [nvarchar](max) NULL,
	[NameAbbr] [varchar](500) NULL,
	[UserCode] [varchar](500) NULL,
	[CreateDate] [datetime] NULL,
	[UpdatedDate] [datetime] NULL,
	[CreatedBy] [nvarchar](128) NULL,
	[UpdatedBy] [nvarchar](128) NULL,
	[IPAddress] [varchar](50) NULL,
	[Status] [int] NULL,
 CONSTRAINT [PK_UserExcelData] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[UserExcelMetaData]    Script Date: 19-06-2023 09:02:50 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[UserExcelMetaData](
	[Id] [nvarchar](128) NOT NULL,
	[AspNetUserId] [nvarchar](128) NULL,
	[FileName] [nvarchar](500) NULL,
	[SheetName] [nvarchar](500) NULL,
	[UploadedFileName] [nvarchar](500) NULL,
	[Rows] [int] NULL,
	[Cols] [int] NULL,
	[LoopCount] [int] NULL,
	[FileMetaData] [nvarchar](1000) NULL,
	[Description] [nvarchar](1000) NULL,
	[CreateDate] [datetime] NOT NULL,
	[UpdatedDate] [datetime] NOT NULL,
	[CreatedBy] [nvarchar](128) NULL,
	[UpdatedBy] [nvarchar](128) NULL,
	[IPAddress] [varchar](50) NOT NULL,
	[Status] [int] NOT NULL,
 CONSTRAINT [PK_UserExcelMetaData] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  UserDefinedFunction [dbo].[fun_CategoryChild]    Script Date: 19-06-2023 09:02:50 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create FUNCTION  [dbo].[fun_CategoryChild](@id smallint)  
RETURNS TABLE  
AS  
RETURN   
(   
    
WITH tblChild AS  
(  
    SELECT *      FROM [MasterCategory] WHERE coalesce(ParentId,0) = @id  
    UNION ALL  
    SELECT [MasterCategory].* FROM [MasterCategory]  JOIN tblChild  ON [MasterCategory].ParentId = tblChild.Id  
)  
SELECT *    FROM tblChild  
  
  
 ); 
GO
/****** Object:  UserDefinedFunction [dbo].[fun_Category]    Script Date: 19-06-2023 09:02:50 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION  [dbo].[fun_Category](
@id smallint  
)
RETURNS TABLE
AS
RETURN 
( 
  
	WITH Category AS
	(
		 SELECT Id,Title,ParentId,[Image],coalesce(DisplayOrder,0) DisplayOrder 	FROM [MasterCategory] 
		 WHERE coalesce(ParentId,-1) = @id and status=1 
	),  
	Catcount  
	AS
	(
	     SELECT Id,ParentId,[Image] FROM [MasterCategory] WHERE   status=1	
	) 
	SELECT c2.* , (select count(1) from fun_CategoryChild(c2.id) where [status]=1 union select c2.id) BookCount,
	(Select count(1) from Catcount c1 where c1.ParentId=c2.Id) ChildCatCount    FROM Category   c2 
 );
GO
/****** Object:  UserDefinedFunction [dbo].[fun_CategoryHierarchy]    Script Date: 19-06-2023 09:02:50 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
CREATE FUNCTION  [dbo].[fun_CategoryHierarchy](     
 @id smallint      
)    
RETURNS TABLE    
AS    
RETURN     
(      
 WITH ctchild AS    
 (         
  select Id,Title,ParentId ,isnull(DisplayOrder,-1)DisplayOrder,isnull(BannerImage,'') BannerImage  
    
  from [dbo].[fun_CategoryChild](@id) where [Status]=1    
 ) ,    
 ctSibling as    
 (    
 select Id,Title,ParentId,isnull(DisplayOrder,-1)DisplayOrder,isnull(BannerImage,'') BannerImage  from [dbo].MasterCategory      
 where parentid in(select Parentid from [dbo].MasterCategory where id=@id )    
 )    
    select Id,Title,ParentId,DisplayOrder,BannerImage From ctchild    
 union all    
 select Id,Title,ParentId,DisplayOrder,BannerImage from ctSibling    
);    
     

GO
/****** Object:  UserDefinedFunction [dbo].[fun_CategoryHierarchyL2]    Script Date: 19-06-2023 09:02:50 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
CREATE FUNCTION  [dbo].[fun_CategoryHierarchyL2](       
 @id smallint ,      
 @parentid smallint       
)      
RETURNS TABLE      
AS      
RETURN       
(        
 WITH ctchild AS      
 (           
  select Id,Title,ParentId ,isnull(DisplayOrder,-1)DisplayOrder,isnull(BannerImage,'') BannerImage from [dbo].[fun_CategoryChild](@parentid) where [Status]=1      
          
 ) ,      
 ctparent as      
 (      
 select Id,Title,ParentId,isnull(DisplayOrder,-1)DisplayOrder ,isnull(BannerImage,'') BannerImage from [dbo].MasterCategory        
 where id =@parentid      
 ),      
 ctparentp as      
 (      
 select Id,Title,ParentId,isnull(DisplayOrder,-1)DisplayOrder,isnull(BannerImage,'') BannerImage  from [dbo].MasterCategory        
 where id in(select parentid from [dbo].MasterCategory where id=@parentid)      
 )      
 select Id,Title,ParentId,DisplayOrder,BannerImage From ctparentp      
 union all      
    select Id,Title,ParentId,DisplayOrder,BannerImage From ctparent      
 union all      
 select Id,Title,ParentId,DisplayOrder,BannerImage from ctchild      
);      

GO
/****** Object:  UserDefinedFunction [dbo].[fun_CategoryBook]    Script Date: 19-06-2023 09:02:50 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
Create FUNCTION  [dbo].[fun_CategoryBook](
@id smallint  
)
RETURNS TABLE
AS
RETURN 
( 
  
 select count(1) BookCount From [dbo].[MasterBooks]  where 
 
 Id in( select id From fun_CategoryChild(@id) where status=1)
 
 );

GO
/****** Object:  UserDefinedFunction [dbo].[fun_CategoryBookCount]    Script Date: 19-06-2023 09:02:50 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 

Create FUNCTION  [dbo].[fun_CategoryBookCount](  
@id smallint    
)  
RETURNS TABLE  
AS  
RETURN   
(   
    
	WITH Category AS  
	(  
		SELECT Id,Title,ParentId,[Image],coalesce(DisplayOrder,0) DisplayOrder  FROM [MasterCategory] WHERE coalesce(ParentId,-1) = @id and status=1  
    
	)  
	SELECT c2.* ,(   select count(1) from fun_CategoryChild(c2.id) where [status]=1 union select c2.id) BookCount
	FROM Category   c2   
 );  
  

GO
/****** Object:  UserDefinedFunction [dbo].[fun_CategoryAll]    Script Date: 19-06-2023 09:02:50 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION  [dbo].[fun_CategoryAll](
@id smallint  
)
RETURNS TABLE
AS
RETURN 
(  
	WITH Category AS
	(
		SELECT Id,Title,coalesce(ParentId,-1) ParentId,[Image],coalesce(DisplayOrder,0) DisplayOrder 	FROM [MasterCategory] WHERE  status=1
 
	) 
  
	SELECT   *   FROM Category     
 );



GO
/****** Object:  UserDefinedFunction [dbo].[fun_CategoryParent]    Script Date: 19-06-2023 09:02:50 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
 CREATE FUNCTION    [dbo].[fun_CategoryParent](@id smallint)
RETURNS TABLE
AS
RETURN 
(
  
  WITH tblParent AS
(
     SELECT [Id] ,[Title] ,[Description] ,isnull([ParentId],0)[ParentId]
      ,[ShortCode],[DisplayOrder],[Image],[CreatedBy],[UpdatedBy],[CreateDate] ,[UpdateDate]   ,[Status],IPAddress  FROM [MasterCategory] WHERE Id = @id
    UNION ALL
    SELECT m1.[Id] ,m1.[Title] ,m1.[Description] ,isnull(m1.[ParentId],0)[ParentId]
      ,m1.[ShortCode],m1.[DisplayOrder],m1.[Image],m1.[CreatedBy],m1.[UpdatedBy],m1.[CreateDate] ,m1.[UpdateDate]   ,m1.[Status],m1.IPAddress    
	  FROM  [MasterCategory] m1  JOIN tblParent  ON  m1.Id = tblParent.ParentId
)
SELECT [Id]
      ,[Title]
      ,[Description]
      ,coalesce([ParentId],0)[ParentId]
      ,[ShortCode]
      ,[DisplayOrder]
      ,[Image]
      ,[CreatedBy]
      ,[UpdatedBy]
      ,[CreateDate] 
      ,[UpdateDate] 
      ,[Status]
      ,[IPaddress] FROM  tblParent

 );
GO
/****** Object:  UserDefinedFunction [dbo].[GetAllLibraryBooks]    Script Date: 19-06-2023 09:02:50 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
    
Create  FUNCTION  [dbo].[GetAllLibraryBooks](@AspNetUserId nvarchar(128))            
RETURNS TABLE            
AS            
RETURN             
(             
               
 with cteBook AS                
 (                
  SELECT Id,MasterCategoryId,MasterBoardId,MasterClassId, [Title],[Image],[ISBN],[Author],[Edition],[EbookPrice],[PrintPrice],EBookType,[Status]      
  FROM dbo.MasterBooks          
 )             
 SELECT b.Id,b.MasterCategoryId, b.[Title],'' 'SlugUrl',b.[Image],b.[ISBN],b.[Author],b.[Edition],b.[EbookPrice],b.[PrintPrice] ,b.EBookType       
 from   cteBook b  
 where b.[Status]=1 
);
GO
/****** Object:  UserDefinedFunction [dbo].[GetLibraryBooks]    Script Date: 19-06-2023 09:02:50 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE  FUNCTION  [dbo].[GetLibraryBooks](@AspNetUserId nvarchar(128))        
RETURNS TABLE        
AS        
RETURN         
(         
 WITH   cteMyLibrary as            
 (            
   SELECT   [Id] ,[MasterBookId] ,[AspNetUserId],[Status]   
   FROM  [dbo].[MyLibrary] where [Status]=1 and [AspNetUserId]=@AspNetUserId  
  -- SELECT Id MasterBookId,1 AspNetUserId, [Status]  
  --FROM dbo.MasterBooks where [Status]=1  
 ) ,            
 cteBook AS            
 (            
  SELECT Id,MasterCategoryId, [Title],[Image],[ISBN],[Author],[Edition],[EbookPrice],[PrintPrice],EBookType,[Status]  
  FROM dbo.MasterBooks where Id in(select [MasterBookId] from cteMyLibrary)        
 )         
 SELECT b.Id,b.MasterCategoryId, b.[Title],'' 'SlugUrl',b.[Image],b.[ISBN],b.[Author],b.[Edition],b.[EbookPrice],b.[PrintPrice] ,b.EBookType   
 from cteMyLibrary a        
 left join cteBook b        
 on a.MasterBookId=b.Id  
 where b.[Status]=1
        
);
GO
/****** Object:  UserDefinedFunction [dbo].[GetSchoolBooks]    Script Date: 19-06-2023 09:02:50 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
Create  FUNCTION  [dbo].[GetSchoolBooks](@AspNetUserId nvarchar(128))        
RETURNS TABLE        
AS        
RETURN         
(         
 WITH   cteBooks as            
 (            
   --SELECT   [Id] ,[MasterBookId] ,[AspNetUserId],[Status]   
   --FROM  [dbo].[MyLibrary] where [Status]=1 and [AspNetUserId]=@AspNetUserId  
   SELECT Id MasterBookId,@AspNetUserId AspNetUserId, [Status]  
  FROM dbo.MasterBooks where [Status]=1  
 ) ,            
 cteBook AS            
 (            
  SELECT Id,MasterCategoryId, [Title],[Image],[ISBN],[Author],[Edition],[EbookPrice],[PrintPrice],EBookType  
  FROM dbo.MasterBooks where Id in(select [MasterBookId] from cteBooks)        
 )         
 SELECT b.Id,b.MasterCategoryId, b.[Title],'' 'SlugUrl',b.[Image],b.[ISBN],b.[Author],b.[Edition],b.[EbookPrice],b.[PrintPrice] ,b.EBookType   
 from cteBooks a        
 left join cteBook b        
 on a.MasterBookId=b.Id        
        
);
GO
/****** Object:  UserDefinedFunction [dbo].[GetStudent]    Script Date: 19-06-2023 09:02:50 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE  FUNCTION  [dbo].[GetStudent](@AspNetUserId nvarchar(128))        
RETURNS TABLE        
AS        
RETURN         
(         
 WITH   cteStudent as            
 (            
	SELECT   [Id] ,[FirstName] ,[LastName],[Gender],[DOB],[MobNo],
	[dtmCreate],[Status],[Email],[UserName],PasswordHash 
	FROM  [dbo].[AspNetUsers] where Id=@AspNetUserId
 ) ,
 cteUserDetail as            
 (            
	select [UseDetailId],AspNetUserId ,[MasterClassId],[MasterBoardId]
	,[SchoolId],[UserCode],[RollNo] ,[Session] ,[Address],AdmissionNo,AccountCode,ParentName
	FROM [dbo].[UserDetail] where AspNetUserId=@AspNetUserId
 ) ,
 cteClass as            
 (            
	select Id,Title FROM [dbo].MasterClass 
	where Id in (select [MasterClassId] from cteUserDetail)
 ),
 cteBoard as            
 (            
	select Id,Title FROM [dbo].MasterBoard 
	where Id in (select [MasterBoardId] from cteUserDetail)
 ),
 cteSchool as            
 (            
	select Id,Title,SchoolCode FROM [dbo].School 
	where Id in (select SchoolId from cteUserDetail)
 ) 
select  a.[Id] ,isnull(a.[FirstName],'')[FirstName] ,isnull(a.[LastName],'')[LastName],isnull(a.[Gender],-1)Gender,
isnull(a.[DOB],'1-1-1900')DOB,isnull(a.[MobNo],'')MOB,a.[dtmCreate],a.[Status],isnull(a.[Email],'')Email,
isnull(a.[UserName],'')UserName,a.PasswordHash,isnull(b.[MasterClassId],-1)MasterClassId,isnull(b.[MasterBoardId],-1)MasterBoardId,
b.[SchoolId],isnull(b.[UserCode],'')UserCode,isnull(b.[RollNo],'')RollNo ,isnull(b.[Session],'')[Session] ,
isnull(b.[Address],'')[Address],isnull(c.Title,'') Class,isnull(d.Title,'') Board,isnull(e.Title,'') School,
isnull(e.SchoolCode,'')SchoolCode,
b.AdmissionNo, b.AccountCode,b.ParentName 
From cteStudent a
left join cteUserDetail b on a.Id=b.AspNetUserId
left join  cteClass c on b.MasterClassId=c.Id
left join  cteBoard d on b.MasterBoardId=d.Id
left join  cteSchool e on b.SchoolId=e.Id 
);
GO
/****** Object:  UserDefinedFunction [dbo].[GetStudentLibraryBooks]    Script Date: 19-06-2023 09:02:50 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
    
CREATE  FUNCTION  [dbo].[GetStudentLibraryBooks](@AspNetUserId nvarchar(128))            
RETURNS TABLE            
AS       
 
RETURN             
( 
	
            
  WITH   cteMyLibrary as                
 (                
   select MasterClassId,MasterBoardId From [dbo].UserDetail where AspNetUserId=@AspNetUserId    
 ), 
  cteUserBooks as                
 (                
   select MasterBookId From [dbo].UserBooks where AspNetUserId=@AspNetUserId 
 ),                
 cteBook AS                
 (                
	SELECT Id,MasterCategoryId,MasterBoardId,MasterClassId, [Title],[Image],[ISBN],[Author],[Edition],[EbookPrice],[PrintPrice],EBookType,[Status]      
	FROM dbo.MasterBooks 
	where MasterClassId in (select MasterClassId from cteMyLibrary ) and status=1 
	Union  
	SELECT Id,MasterCategoryId,MasterBoardId,MasterClassId, [Title],[Image],[ISBN],[Author],[Edition],[EbookPrice],[PrintPrice],EBookType,[Status]      
	FROM dbo.MasterBooks where Id in(select MasterBookId from cteUserBooks) and status=1 
  )
             
 SELECT b.Id,b.MasterCategoryId, b.[Title],'' 'SlugUrl',b.[Image],b.[ISBN],b.[Author],b.[Edition],b.[EbookPrice],b.[PrintPrice] ,b.EBookType       
 from cteBook b            
    
            
);
GO
/****** Object:  View [dbo].[getNewID]    Script Date: 19-06-2023 09:02:50 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 create view [dbo].[getNewID] as select newid() as new_id 
GO
ALTER TABLE [dbo].[AspNetUserClaims]  WITH CHECK ADD  CONSTRAINT [FK_dbo.AspNetUserClaims_dbo.AspNetUsers_UserId] FOREIGN KEY([UserId])
REFERENCES [dbo].[AspNetUsers] ([Id])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[AspNetUserClaims] CHECK CONSTRAINT [FK_dbo.AspNetUserClaims_dbo.AspNetUsers_UserId]
GO
ALTER TABLE [dbo].[AspNetUserLogins]  WITH CHECK ADD  CONSTRAINT [FK_dbo.AspNetUserLogins_dbo.AspNetUsers_UserId] FOREIGN KEY([UserId])
REFERENCES [dbo].[AspNetUsers] ([Id])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[AspNetUserLogins] CHECK CONSTRAINT [FK_dbo.AspNetUserLogins_dbo.AspNetUsers_UserId]
GO
ALTER TABLE [dbo].[AspNetUserRoles]  WITH CHECK ADD  CONSTRAINT [FK_dbo.AspNetUserRoles_dbo.AspNetRoles_RoleId] FOREIGN KEY([RoleId])
REFERENCES [dbo].[AspNetRoles] ([Id])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[AspNetUserRoles] CHECK CONSTRAINT [FK_dbo.AspNetUserRoles_dbo.AspNetRoles_RoleId]
GO
ALTER TABLE [dbo].[AspNetUserRoles]  WITH CHECK ADD  CONSTRAINT [FK_dbo.AspNetUserRoles_dbo.AspNetUsers_UserId] FOREIGN KEY([UserId])
REFERENCES [dbo].[AspNetUsers] ([Id])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[AspNetUserRoles] CHECK CONSTRAINT [FK_dbo.AspNetUserRoles_dbo.AspNetUsers_UserId]
GO
ALTER TABLE [dbo].[MasterBoard]  WITH CHECK ADD  CONSTRAINT [FK_MasterBoard_AspNetUsers1] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[AspNetUsers] ([Id])
GO
ALTER TABLE [dbo].[MasterBoard] CHECK CONSTRAINT [FK_MasterBoard_AspNetUsers1]
GO
ALTER TABLE [dbo].[MasterBooks]  WITH CHECK ADD  CONSTRAINT [FK_MasterBooks_AspNetUsers] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[AspNetUsers] ([Id])
GO
ALTER TABLE [dbo].[MasterBooks] CHECK CONSTRAINT [FK_MasterBooks_AspNetUsers]
GO
ALTER TABLE [dbo].[MasterBooks]  WITH CHECK ADD  CONSTRAINT [FK_MasterBooks_AspNetUsers1] FOREIGN KEY([UpdatedBy])
REFERENCES [dbo].[AspNetUsers] ([Id])
GO
ALTER TABLE [dbo].[MasterBooks] CHECK CONSTRAINT [FK_MasterBooks_AspNetUsers1]
GO
ALTER TABLE [dbo].[MasterBooks]  WITH CHECK ADD  CONSTRAINT [FK_MasterBooks_MasterBoard] FOREIGN KEY([MasterBoardId])
REFERENCES [dbo].[MasterBoard] ([Id])
GO
ALTER TABLE [dbo].[MasterBooks] CHECK CONSTRAINT [FK_MasterBooks_MasterBoard]
GO
ALTER TABLE [dbo].[MasterBooks]  WITH CHECK ADD  CONSTRAINT [FK_MasterBooks_MasterCategory] FOREIGN KEY([MasterCategoryId])
REFERENCES [dbo].[MasterCategory] ([Id])
GO
ALTER TABLE [dbo].[MasterBooks] CHECK CONSTRAINT [FK_MasterBooks_MasterCategory]
GO
ALTER TABLE [dbo].[MasterBooks]  WITH CHECK ADD  CONSTRAINT [FK_MasterBooks_MasterClass] FOREIGN KEY([MasterClassId])
REFERENCES [dbo].[MasterClass] ([Id])
GO
ALTER TABLE [dbo].[MasterBooks] CHECK CONSTRAINT [FK_MasterBooks_MasterClass]
GO
ALTER TABLE [dbo].[MasterBooks]  WITH CHECK ADD  CONSTRAINT [FK_MasterBooks_MasterSeries] FOREIGN KEY([MasterSeriesid])
REFERENCES [dbo].[MasterSeries] ([Id])
GO
ALTER TABLE [dbo].[MasterBooks] CHECK CONSTRAINT [FK_MasterBooks_MasterSeries]
GO
ALTER TABLE [dbo].[MasterBooks]  WITH CHECK ADD  CONSTRAINT [FK_MasterBooks_MasterSubject] FOREIGN KEY([MasterSubjectid])
REFERENCES [dbo].[MasterSubject] ([Id])
GO
ALTER TABLE [dbo].[MasterBooks] CHECK CONSTRAINT [FK_MasterBooks_MasterSubject]
GO
ALTER TABLE [dbo].[MasterCategory]  WITH CHECK ADD  CONSTRAINT [FK_MasterCategory_AspNetUsers] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[AspNetUsers] ([Id])
GO
ALTER TABLE [dbo].[MasterCategory] CHECK CONSTRAINT [FK_MasterCategory_AspNetUsers]
GO
ALTER TABLE [dbo].[MasterCategory]  WITH CHECK ADD  CONSTRAINT [FK_MasterCategory_AspNetUsers1] FOREIGN KEY([UpdatedBy])
REFERENCES [dbo].[AspNetUsers] ([Id])
GO
ALTER TABLE [dbo].[MasterCategory] CHECK CONSTRAINT [FK_MasterCategory_AspNetUsers1]
GO
ALTER TABLE [dbo].[MasterCategory]  WITH CHECK ADD  CONSTRAINT [FK_MasterCategory_MasterCategory] FOREIGN KEY([ParentId])
REFERENCES [dbo].[MasterCategory] ([Id])
GO
ALTER TABLE [dbo].[MasterCategory] CHECK CONSTRAINT [FK_MasterCategory_MasterCategory]
GO
ALTER TABLE [dbo].[MasterClass]  WITH CHECK ADD  CONSTRAINT [FK_MasterClass_AspNetUsers] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[AspNetUsers] ([Id])
GO
ALTER TABLE [dbo].[MasterClass] CHECK CONSTRAINT [FK_MasterClass_AspNetUsers]
GO
ALTER TABLE [dbo].[MasterClass]  WITH CHECK ADD  CONSTRAINT [FK_MasterClass_AspNetUsers1] FOREIGN KEY([UpdatedBy])
REFERENCES [dbo].[AspNetUsers] ([Id])
GO
ALTER TABLE [dbo].[MasterClass] CHECK CONSTRAINT [FK_MasterClass_AspNetUsers1]
GO
ALTER TABLE [dbo].[MasterSeries]  WITH CHECK ADD  CONSTRAINT [FK_MasterSeries_MasterSubject] FOREIGN KEY([MasterSubjectId])
REFERENCES [dbo].[MasterSubject] ([Id])
GO
ALTER TABLE [dbo].[MasterSeries] CHECK CONSTRAINT [FK_MasterSeries_MasterSubject]
GO
ALTER TABLE [dbo].[MasterSubject]  WITH CHECK ADD  CONSTRAINT [FK_MasterSubject_AspNetUsers1] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[AspNetUsers] ([Id])
GO
ALTER TABLE [dbo].[MasterSubject] CHECK CONSTRAINT [FK_MasterSubject_AspNetUsers1]
GO
ALTER TABLE [dbo].[MyLibrary]  WITH CHECK ADD  CONSTRAINT [FK_MyLibrary_AspNetUsers] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[AspNetUsers] ([Id])
GO
ALTER TABLE [dbo].[MyLibrary] CHECK CONSTRAINT [FK_MyLibrary_AspNetUsers]
GO
ALTER TABLE [dbo].[MyLibrary]  WITH CHECK ADD  CONSTRAINT [FK_MyLibrary_AspNetUsers1] FOREIGN KEY([UpdatedBy])
REFERENCES [dbo].[AspNetUsers] ([Id])
GO
ALTER TABLE [dbo].[MyLibrary] CHECK CONSTRAINT [FK_MyLibrary_AspNetUsers1]
GO
ALTER TABLE [dbo].[MyLibrary]  WITH CHECK ADD  CONSTRAINT [FK_MyLibrary_MasterBooks] FOREIGN KEY([MasterBookId])
REFERENCES [dbo].[MasterBooks] ([Id])
GO
ALTER TABLE [dbo].[MyLibrary] CHECK CONSTRAINT [FK_MyLibrary_MasterBooks]
GO
ALTER TABLE [dbo].[School]  WITH CHECK ADD  CONSTRAINT [FK_School_AspNetUsers] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[AspNetUsers] ([Id])
GO
ALTER TABLE [dbo].[School] CHECK CONSTRAINT [FK_School_AspNetUsers]
GO
ALTER TABLE [dbo].[School]  WITH CHECK ADD  CONSTRAINT [FK_School_AspNetUsers1] FOREIGN KEY([UpdatedBy])
REFERENCES [dbo].[AspNetUsers] ([Id])
GO
ALTER TABLE [dbo].[School] CHECK CONSTRAINT [FK_School_AspNetUsers1]
GO
ALTER TABLE [dbo].[School]  WITH CHECK ADD  CONSTRAINT [FK_School_MasterBoard] FOREIGN KEY([MasterBoardId])
REFERENCES [dbo].[MasterBoard] ([Id])
GO
ALTER TABLE [dbo].[School] CHECK CONSTRAINT [FK_School_MasterBoard]
GO
ALTER TABLE [dbo].[UserDetail]  WITH CHECK ADD  CONSTRAINT [FK_UserDetail_AspNetUsers] FOREIGN KEY([AspNetUserId])
REFERENCES [dbo].[AspNetUsers] ([Id])
GO
ALTER TABLE [dbo].[UserDetail] CHECK CONSTRAINT [FK_UserDetail_AspNetUsers]
GO
ALTER TABLE [dbo].[UserDetail]  WITH CHECK ADD  CONSTRAINT [FK_UserDetail_AspNetUsers1] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[AspNetUsers] ([Id])
GO
ALTER TABLE [dbo].[UserDetail] CHECK CONSTRAINT [FK_UserDetail_AspNetUsers1]
GO
ALTER TABLE [dbo].[UserDetail]  WITH CHECK ADD  CONSTRAINT [FK_UserDetail_AspNetUsers2] FOREIGN KEY([UpdatedBy])
REFERENCES [dbo].[AspNetUsers] ([Id])
GO
ALTER TABLE [dbo].[UserDetail] CHECK CONSTRAINT [FK_UserDetail_AspNetUsers2]
GO
ALTER TABLE [dbo].[UserDetail]  WITH CHECK ADD  CONSTRAINT [FK_UserDetail_MasterBoard] FOREIGN KEY([MasterBoardId])
REFERENCES [dbo].[MasterBoard] ([Id])
GO
ALTER TABLE [dbo].[UserDetail] CHECK CONSTRAINT [FK_UserDetail_MasterBoard]
GO
ALTER TABLE [dbo].[UserDetail]  WITH CHECK ADD  CONSTRAINT [FK_UserDetail_MasterClass] FOREIGN KEY([MasterClassId])
REFERENCES [dbo].[MasterClass] ([Id])
GO
ALTER TABLE [dbo].[UserDetail] CHECK CONSTRAINT [FK_UserDetail_MasterClass]
GO
ALTER TABLE [dbo].[UserDetail]  WITH CHECK ADD  CONSTRAINT [FK_UserDetail_School] FOREIGN KEY([SchoolId])
REFERENCES [dbo].[School] ([Id])
GO
ALTER TABLE [dbo].[UserDetail] CHECK CONSTRAINT [FK_UserDetail_School]
GO
ALTER TABLE [dbo].[UserExcelData]  WITH CHECK ADD  CONSTRAINT [FK_UserExcelData_AspNetUsers] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[AspNetUsers] ([Id])
GO
ALTER TABLE [dbo].[UserExcelData] CHECK CONSTRAINT [FK_UserExcelData_AspNetUsers]
GO
ALTER TABLE [dbo].[UserExcelData]  WITH CHECK ADD  CONSTRAINT [FK_UserExcelData_AspNetUsers1] FOREIGN KEY([UpdatedBy])
REFERENCES [dbo].[AspNetUsers] ([Id])
GO
ALTER TABLE [dbo].[UserExcelData] CHECK CONSTRAINT [FK_UserExcelData_AspNetUsers1]
GO
ALTER TABLE [dbo].[UserExcelData]  WITH CHECK ADD  CONSTRAINT [FK_UserExcelData_UserExcelMetaData] FOREIGN KEY([UserExcelMetaDataId])
REFERENCES [dbo].[UserExcelMetaData] ([Id])
GO
ALTER TABLE [dbo].[UserExcelData] CHECK CONSTRAINT [FK_UserExcelData_UserExcelMetaData]
GO
ALTER TABLE [dbo].[UserExcelMetaData]  WITH CHECK ADD  CONSTRAINT [FK_UserExcelMetaData_AspNetUsers] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[AspNetUsers] ([Id])
GO
ALTER TABLE [dbo].[UserExcelMetaData] CHECK CONSTRAINT [FK_UserExcelMetaData_AspNetUsers]
GO
ALTER TABLE [dbo].[UserExcelMetaData]  WITH CHECK ADD  CONSTRAINT [FK_UserExcelMetaData_AspNetUsers1] FOREIGN KEY([UpdatedBy])
REFERENCES [dbo].[AspNetUsers] ([Id])
GO
ALTER TABLE [dbo].[UserExcelMetaData] CHECK CONSTRAINT [FK_UserExcelMetaData_AspNetUsers1]
GO
ALTER TABLE [dbo].[UserExcelMetaData]  WITH CHECK ADD  CONSTRAINT [FK_UserExcelMetaData_AspNetUsers2] FOREIGN KEY([AspNetUserId])
REFERENCES [dbo].[AspNetUsers] ([Id])
GO
ALTER TABLE [dbo].[UserExcelMetaData] CHECK CONSTRAINT [FK_UserExcelMetaData_AspNetUsers2]
GO
/****** Object:  StoredProcedure [dbo].[CleanUploadData]    Script Date: 19-06-2023 09:02:50 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
       
CREATE  PROCEDURE  [dbo].[CleanUploadData]                  
 (           
  @UserExcelMetaDataId [nvarchar](128)  ,        
  @SchoolId [nvarchar](128)  , 
  @result   int  output ,
  @Message varchar(500) output        
 )                  
As                  
BEGIN              
 begin transaction      
 BEGIN TRY    
	declare @Id nvarchar(128),@rows int

	select @rows=isnull(count(1),0)  From dbo.UserExcelData 
	where  UserExcelMetaDataId=@UserExcelMetaDataId

	select top 1 @Id=Id From dbo.[UserExcelMetaData] 
	where [Status]=-2
		
	Update   dbo.[UserExcelMetaData]
	set Status=-3,
	Description='Data has been archived. '
	where  Id=@Id
		
	delete from dbo.Userdetail where AspNetUserId in(
	select Id  from dbo.AspNetUsers where UserExcelMetaDataId=@Id)

	delete  from dbo.AspNetUsers where UserExcelMetaDataId=@Id

	insert into dbo.History_UserExcelData
	select * FROM dbo.UserExcelData where UserExcelMetaDataId=@Id
		
	delete  FROM dbo.UserExcelData where UserExcelMetaDataId=@Id 
	 
	 
	  set @Message=cast (@rows as varchar)+' students inserted successfully .'   
	     
	set @result =1       
   commit transaction        
 END TRY                    
 BEGIN CATCH                   
 set @result=-1                   
 set @Message=ERROR_MESSAGE()        
         
  --SELECT ERROR_NUMBER() AS ErrorNumber                  
  -- ,ERROR_SEVERITY() AS ErrorSeverity                  
  -- ,ERROR_STATE() AS ErrorState       
  -- ,ERROR_PROCEDURE() AS ErrorProcedure                  
  -- ,ERROR_LINE() AS ErrorLine                  
  -- ,ERROR_MESSAGE() AS ErrorMessage                     
  rollback transaction                    
 END CATCH                   
   return --return from procedure successfully                     
END 
GO
/****** Object:  StoredProcedure [dbo].[DeleteCategory]    Script Date: 19-06-2023 09:02:50 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE  PROCEDURE  [dbo].[DeleteCategory]            
 (     
 @Id bigint,    
 @result   int  output ,     
 @IImage  varchar(200) output,  
 @Message varchar(500) output  
 )            
As            
BEGIN    
begin try      
 begin transaction    
 declare @isexist int  
 declare @Title nvarchar(300)  
 select  @Title=isnull(Title,''),@IImage=isnull([Image],'') from dbo.MasterCategory  where Id=@Id   
 if  not exists(select Id from MasterBooks where ParentId=@Id )  or not exists(select Id from MasterBooks where MasterCategoryId=@Id )   
 begin  
      
  delete from dbo.MasterCategory  where Id=@Id  
  set @Message=isnull(@Title,'') +' deleted successfully.'  
  set @result =1  
 end  
 else  
 begin  
  set @Message=isnull(@Title,'') +' is not allowed to be delete it is used by another process.'  
  set @result =3  
 end      
 commit transaction              
 END TRY              
 BEGIN CATCH             
 set @result=-1             
 set @Message=ERROR_MESSAGE()    
 set @IImage =''  
  --SELECT ERROR_NUMBER() AS ErrorNumber            
  -- ,ERROR_SEVERITY() AS ErrorSeverity            
  -- ,ERROR_STATE() AS ErrorState            
  -- ,ERROR_PROCEDURE() AS ErrorProcedure            
  -- ,ERROR_LINE() AS ErrorLine            
  -- ,ERROR_MESSAGE() AS ErrorMessage               
  rollback transaction              
 END CATCH             
   return --return from procedure successfully               
END 
GO
/****** Object:  StoredProcedure [dbo].[GetSchools]    Script Date: 19-06-2023 09:02:50 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
CREATE procedure [dbo].[GetSchools]      
(      
 @RoleId nvarchar(1000),      
 @MaxRows int=50,      
 @Page int=0,      
 @CurrentRow int       
)      
AS      
BEGIN      
  SET FMTONLY OFF      
 Declare @TempTable table      
 (      
   [RowNum] int          
  ,[Id] nvarchar(128) 
  ,[SchoolCode] nvarchar(max)     
  ,[Name] nvarchar(max) 
  ,[ContactNo] nvarchar(max)    
  ,[State] nvarchar(500)    
  ,[City] nvarchar(500)   
  ,[PinCode] nvarchar(20)   
  ,[Email] nvarchar(200)      
  ,[PasswordHash] nvarchar(max)      
  ,[UserName] nvarchar(max)      
  ,[Logo] nvarchar(max)    
  ,[AspNetUserId] nvarchar(128)   
  ,[Status] int 
  ,Strength bigint 
  ,ITIncharge nvarchar(max)
  ,MasterBoardId   bigint 
  ,MasterBoard nvarchar(max)
 );    
 DECLARE @SQL nvarchar(max)   
 set @SQL= '  
WITH  cteSchool AS      
(      
  SELECT  RowNum, [Id],SchoolCode  , Title, ContactNo, [State],City, PinCode, EmailId,  
  AspNetUserId, [Status],UserName, PasswordHash,Strength ,ITIncharge,MasterBoardId ,MasterBoard FROM    (       
 SELECT    ROW_NUMBER() OVER ( ORDER BY [CreateDate] desc  ) AS RowNum,       
 a.[Id]  ,isnull(a.[Title],'''')Title,isnull(a.[ContactNo],'''')ContactNo,isnull(a.[State],'''')State,  
 isnull(a.[City],'''')City,isnull(a.PinCode,'''')PinCode,isnull(a.[EmailId],'''')EmailId,  
 isnull(a.[AspNetUserId],'''')AspNetUserId,isnull(a.[Status],0)Status,  
 isnull(b.UserName,'''')UserName,isnull(b.PasswordHash,'''')PasswordHash  ,SchoolCode
 ,isnull(a.[Strength],''0'')Strength
 ,isnull(a.[ITIncharge],'''')ITIncharge
 ,a.MasterBoardId
  ,isnull(c.Title,'''') MasterBoard 

 FROM [dbo].School a  
 left join AspNetUsers b on a.AspNetUserId=b.Id  
 left join MasterBoard c on a.MasterBoardId=c.Id 
  ) AS RowConstrainedResult      
  WHERE   RowNum >= '+cast(@CurrentRow+1 as varchar)+'      
  AND RowNum <= '+cast(@Page*@MaxRows as varchar)+'     
)   


select   RowNum, [Id]  ,SchoolCode, Title, ContactNo, [State],City, PinCode, EmailId,  
  AspNetUserId, [Status],UserName, PasswordHash,Strength ,ITIncharge,MasterBoardId ,MasterBoard  from cteSchool'       
   
print    @SQL
INSERT INTO @TempTable( RowNum, [Id],SchoolCode  , [Name], ContactNo, [State],City, PinCode, Email,  
  AspNetUserId, [Status],UserName, PasswordHash,Strength ,ITIncharge,MasterBoardId ,MasterBoard )       
EXEC sp_executesql @SQL   
select  RowNum, [Id] ,SchoolCode , [Name], ContactNo, [State],City, PinCode, Email,  
  AspNetUserId, [Status],UserName, PasswordHash,Strength ,ITIncharge,MasterBoardId ,MasterBoard  from @TempTable  ORDER BY RowNum asc    
END      
  
GO
/****** Object:  StoredProcedure [dbo].[GetSchoolStudents]    Script Date: 19-06-2023 09:02:50 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
CREATE procedure [dbo].[GetSchoolStudents]      
(      
 @RoleId nvarchar(1000),      
 @SchoolId nvarchar(1000),      
 @MaxRows int=50,      
 @Page int=0,      
 @CurrentRow int       
)      
AS      
BEGIN      
  SET FMTONLY OFF      
Declare @TempTable table      
(    
	[RowNum] int          
	,[Id] nvarchar(128)    
	,[FirstName] nvarchar(max)      
	,[LastName] nvarchar(max)      
	,[Gender] int      
	,[DOB] datetime   
	,[PasswordHash] nvarchar(max)      
	,[UserName] nvarchar(256)    
	,[Email] nvarchar(max)      
	,[dtmCreate] datetime      
	,[dtmUpdate] datetime    
	,[Status] int      
	,[MasterClassId] bigint  
	,[MasterBoardId] bigint 
	,[Class] nvarchar(max)    
	,[Board] nvarchar(max)   
	,[SchoolId] nvarchar(128)    
	,[UserCode] nvarchar(200) 
	,[Name] nvarchar(max) 
	,[RollNo] varchar(50)    
	,[Session] nvarchar(50)  
	,[ContactNo]  nvarchar(50)  
	,[Address]  nvarchar(500) ,
	[AdmissionNo]	nvarchar(200)	,
	[AccountCode]	nvarchar(200)	,
	[ParentName]	nvarchar(500)	,
	[DateOfBirth]	datetime	   
);    
 DECLARE @SQL nvarchar(max)   
 set @SQL= '  
 WITH         
 cteUserDetail AS  
 (  
	select RowNum, [UseDetailId],[AspNetUserId],[MasterClassId],[MasterBoardId],[SchoolId],[UserCode]  
	,[Name] ,[RollNo] ,[Session] ,[ContactNo],[Address] ,AdmissionNo,AccountCode,ParentName,DateOfBirth    from ( 
	SELECT ROW_NUMBER() OVER ( ORDER BY [Session] desc, MasterClassId asc,RollNo asc,[Name] asc   ) AS RowNum, 
	[UseDetailId],[AspNetUserId],[MasterClassId],[MasterBoardId],[SchoolId],[UserCode]  
	,[Name] ,[RollNo] ,[Session] ,[ContactNo],[Address] ,AdmissionNo,AccountCode,ParentName,DateOfBirth 
	FROM [dbo].[UserDetail]   where SchoolId='''+@SchoolId+'''
	) AS RowConstrainedResult      
  WHERE   RowNum >= '+cast(@CurrentRow+1 as varchar)+'      
  AND RowNum <= '+cast(@Page*@MaxRows as varchar)+'     
 ),  
 
 cteUsers AS (      
  SELECT   [Id]  ,[FirstName]  ,[LastName] ,[Gender]   ,[DOB] ,[PasswordHash] ,
  [UserName] ,[dtmCreate], [dtmUpdate],[Status],[Email]  from AspNetUsers
  where    Id in (Select AspNetUserId from cteUserDetail ) 
 )  
 select a.RowNum,b.[Id],b.[FirstName],b.[LastName],b.[Gender],b.[DOB],b.[PasswordHash] ,
 b.[UserName]  ,b.[Email],  b.[dtmCreate], b.[dtmUpdate],b.[Status], a.[MasterClassId],
 a.[MasterBoardId] ,c.Title Class  ,d.Title Board ,a.[SchoolId],a.[UserCode],a.[Name] ,  
 a.[RollNo] ,a.[Session] ,a.[ContactNo],a.[Address],a.AdmissionNo,a.AccountCode,a.ParentName,a.DateOfBirth   
 from cteUserDetail a  
 left join cteUsers  b on a.AspNetUserId=b.Id   
 left join  MasterClass c on a.[MasterClassId]=c.Id  
 left join  MasterBoard d on a.[MasterBoardId]=d.Id  
 '       
 print @SQL
INSERT INTO @TempTable       
EXEC sp_executesql @SQL  
  
select  [RowNum] ,[Id],[FirstName] ,[LastName],[Gender],[DOB] ,[PasswordHash] ,[UserName],
[Email] ,[dtmCreate],[dtmUpdate] ,[Status] ,[MasterClassId],[MasterBoardId] ,[Class]  ,[Board]  ,[SchoolId] ,[UserCode],[Name],    
[RollNo]  ,[Session],[ContactNo]  ,[Address], AdmissionNo, AccountCode, ParentName, DateOfBirth  from @TempTable  ORDER BY RowNum asc      
      
END 
GO
/****** Object:  StoredProcedure [dbo].[GetUserBooks]    Script Date: 19-06-2023 09:02:50 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
CREATE procedure [dbo].[GetUserBooks]      
(      
@AspNetUserId nvarchar(128),      
@MasterClassId bigint  ,   
@MasterBoardId bigint    
)      
AS      
BEGIN      
	SET FMTONLY OFF      
	Declare @TempTable table      
	(     
		[Id] [nvarchar](128) ,
		[MasterCategoryId] [bigint]  ,
		[MasterClassId] [bigint]  ,
		[MasterBoardId] [bigint]  ,
		[MasterSubjectid] [bigint]  ,
		[MasterSeriesid] [bigint]  ,
		[Title] [nvarchar](1000)  ,
		[Author] [nvarchar](1000)  ,
		[ISBN] [varchar](50)  ,
		[Edition] [varchar](50)  ,
		[Image] [varchar](150)  , 
		IsAssigned int 
	);    
	DECLARE @SQL nvarchar(max) 
	if  @MasterClassId<>0 and @MasterBoardId<>0
	begin 
		with cteBooks as
		(
			select [Id],[MasterCategoryId],[MasterClassId],[MasterBoardId],[MasterSubjectid],[MasterSeriesid]  ,
			[Title],[Author],[ISBN],[Edition],[Image] from [dbo].[MasterBooks] 
			where [MasterClassId]= @MasterClassId and  MasterBoardId=@MasterBoardId and [Status]=1
		),
		cteUserBooks as
		(
			select MasterBookId from [dbo].[UserBooks] where [AspNetUserId]=@AspNetUserId
		)
		insert into @TempTable([Id],[MasterCategoryId],[MasterClassId],[MasterBoardId],[MasterSubjectid],
		[MasterSeriesid],[Title],[Author],[ISBN],[Edition],[Image],IsAssigned )
		select a.[Id],a.[MasterCategoryId],a.[MasterClassId],a.[MasterBoardId],a.[MasterSubjectid],
		a.[MasterSeriesid],a.[Title],a.[Author],a.[ISBN],a.[Edition],a.[Image],case when b.MasterBookid <> null then 1 else 0 end from cteBooks a
		left join cteUserBooks b on a.Id=b.MasterBookId
	end
	else if @MasterBoardId<>0
	begin
		with cteBooks as
		(
			select [Id],[MasterCategoryId],[MasterClassId],[MasterBoardId],[MasterSubjectid],[MasterSeriesid]  ,
			[Title],[Author],[ISBN],[Edition],[Image] from [dbo].[MasterBooks] 
			where  MasterBoardId= @MasterBoardId and   [Status]=1
		),
		cteUserBooks as
		(
			select MasterBookId from [dbo].[UserBooks] where [AspNetUserId]=@AspNetUserId
		)
		insert into @TempTable([Id],[MasterCategoryId],[MasterClassId],[MasterBoardId],[MasterSubjectid],
		[MasterSeriesid],[Title],[Author],[ISBN],[Edition],[Image],IsAssigned )
		select a.[Id],a.[MasterCategoryId],a.[MasterClassId],a.[MasterBoardId],a.[MasterSubjectid],
		a.[MasterSeriesid],a.[Title],a.[Author],a.[ISBN],a.[Edition],a.[Image],case when b.MasterBookid <> null then 1 else 0 end from cteBooks a
		left join cteUserBooks b on a.Id=b.MasterBookId
	end
	else if @MasterClassId<>0
	begin
		with cteBooks as
		(
			select [Id],[MasterCategoryId],[MasterClassId],[MasterBoardId],[MasterSubjectid],[MasterSeriesid]  ,
			[Title],[Author],[ISBN],[Edition],[Image] from [dbo].[MasterBooks] 
			where [MasterClassId]= @MasterClassId and   [Status]=1
		),
		cteUserBooks as
		(
			select MasterBookId from [dbo].[UserBooks] where [AspNetUserId]=@AspNetUserId
		)
		insert into @TempTable([Id],[MasterCategoryId],[MasterClassId],[MasterBoardId],[MasterSubjectid],
		[MasterSeriesid],[Title],[Author],[ISBN],[Edition],[Image],IsAssigned )
		select a.[Id],a.[MasterCategoryId],a.[MasterClassId],a.[MasterBoardId],a.[MasterSubjectid],
		a.[MasterSeriesid],a.[Title],a.[Author],a.[ISBN],a.[Edition],a.[Image],case when b.MasterBookid <> null then 1 else 0 end from cteBooks a
		left join cteUserBooks b on a.Id=b.MasterBookId
	end
    else 
	begin
		with cteBooks as
		(
			select [Id],[MasterCategoryId],[MasterClassId],[MasterBoardId],[MasterSubjectid],[MasterSeriesid]  ,
			[Title],[Author],[ISBN],[Edition],[Image] from [dbo].[MasterBooks] 
			where    [Status]=1
		),
		cteUserBooks as
		(
			select MasterBookId from [dbo].[UserBooks] where [AspNetUserId]=@AspNetUserId
		)
		insert into @TempTable([Id],[MasterCategoryId],[MasterClassId],[MasterBoardId],[MasterSubjectid],
		[MasterSeriesid],[Title],[Author],[ISBN],[Edition],[Image],IsAssigned )
		select a.[Id],a.[MasterCategoryId],a.[MasterClassId],a.[MasterBoardId],a.[MasterSubjectid],
		a.[MasterSeriesid],a.[Title],a.[Author],a.[ISBN],a.[Edition],a.[Image],case when b.MasterBookid <> null then 1 else 0 end from cteBooks a
		left join cteUserBooks b on a.Id=b.MasterBookId
	end

	select [Id],[MasterCategoryId],[MasterClassId],[MasterBoardId],[MasterSubjectid],
	[MasterSeriesid],[Title],[Author],[ISBN],[Edition],[Image],IsAssigned  From @TempTable
	order by [Title] asc
END      
  
GO
/****** Object:  StoredProcedure [dbo].[GetUsers]    Script Date: 19-06-2023 09:02:50 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[GetUsers]    
(    
 @RoleId nvarchar(1000),    
 @MaxRows int=50,    
 @Page int=0,    
 @CurrentRow int     
)    
AS    
BEGIN    
  SET FMTONLY OFF    
Declare @TempTable table    
(    [RowNum] int        
    ,[Id] nvarchar(128)  
    ,[FirstName] nvarchar(max)    
    ,[LastName] nvarchar(max)    
    ,[Gender] int    
    ,[DOB] datetime 
	,[LoginSourse] int  
    ,[dtmCreate] datetime    
    ,[dtmUpdate] datetime    
    ,[dtmDelete] datetime    
    ,[Status] int    
    ,[Email] nvarchar(max)    
    ,[EmailConfirmed] bit    
    ,[PasswordHash] nvarchar(max)    
    ,[PhoneNumber] nvarchar(max)    
    ,[PhoneNumberConfirmed] bit    
    ,[UserName] nvarchar(256)    
);  
 DECLARE @SQL nvarchar(max) 
 set @SQL= 'WITH  cteUsers AS    
(    
  SELECT  *   FROM    (     
  SELECT    ROW_NUMBER() OVER ( ORDER BY [dtmCreate] desc  ) AS RowNum,     
    [Id]  ,[FirstName]  ,[LastName] ,[Gender]   ,[DOB],LoginSourse ,[dtmCreate]    
   ,[dtmUpdate]  ,[dtmDelete]  ,[Status]    ,[Email]   ,[EmailConfirmed]    
   ,[PasswordHash] ,[PhoneNumber] ,[PhoneNumberConfirmed]  ,[UserName]    
   FROM [dbo].[AspNetUsers]    
   where     
   Id in (Select [UserId]  from AspNetUserRoles where [RoleId] in('+@RoleId+')   )    
              
  ) AS RowConstrainedResult    
  WHERE   RowNum >= '+cast(@CurrentRow+1 as varchar)+'    
  AND RowNum <= '+cast(@Page*@MaxRows as varchar)+'   
)   select * from cteUsers '     
  
INSERT INTO @TempTable     
EXEC sp_executesql @SQL

select * from @TempTable  ORDER BY RowNum asc    
    
END    
GO
/****** Object:  StoredProcedure [dbo].[InsertUpdateBulkStudent]    Script Date: 19-06-2023 09:02:50 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
       
CREATE  PROCEDURE  [dbo].[InsertUpdateBulkStudent]                  
 (           
  @UserExcelMetaDataId [nvarchar](128)  ,        
  @SchoolId [nvarchar](128)  ,        
  @CreatedBy  [nvarchar](128)  ,        
  @IPaddress [varchar](50) ,         
  @result   int  output ,      
  @Rowcount   int  output ,      
  @IId [nvarchar](128) output ,        
  @IImage  varchar(500) output,        
  @Message varchar(500) output        
 )                  
As                  
BEGIN              
 begin transaction      
 BEGIN TRY    
      set @Rowcount=0  
      Declare @TempTable table          
		(        
			[Id] [nvarchar](128) ,  
			[UserExcelMetaDataId] [nvarchar](128) ,  
			[MasterClassId] [bigint] ,  
			[MasterBoardId] [bigint] ,  
			[AspNetUserId] [nvarchar](128) ,  
			[UpdateUserId] [nvarchar](128) ,  
			[Name] [nvarchar](500) ,  
			[Class] [nvarchar](200) ,  
			[RollNo] [varchar](50) ,  
			[Session] [varchar](50) ,  
			[Board] [nvarchar](500) ,  
			[Password] [nvarchar](max) ,  
			[NameAbbr] [varchar](500) ,  
			[UserCode] [varchar](500) ,  
			[CreatedBy] [nvarchar](128) ,  
			[IPAddress] [varchar](50) ,  
			[Status] [int],

			[AdmissionNo]	[nvarchar](200),
			[AccountCode]	[nvarchar](200)	,
			[ParentName]	[nvarchar](500)	,
			[DateOfBirth]	[datetime]	    
		);        
		with cteUserExcelData as    
		(    
			select top 100 [Id],[UserExcelMetaDataId],[MasterClassId],[MasterBoardId],[AspNetUserId],[UpdateUserId],  
			[Name],[Class],[RollNo],[Session] ,[Board],[Password],[NameAbbr],[UserCode],[CreatedBy],[IPAddress],  
			[Status] ,[AdmissionNo] ,[AccountCode],[ParentName],[DateOfBirth] From dbo.[UserExcelData]     
			where   UserExcelMetaDataId=@UserExcelMetaDataId  and [Status]=-1   
		)     
		INSERT INTO @TempTable ([Id],[UserExcelMetaDataId],[MasterClassId],[MasterBoardId],[AspNetUserId],[UpdateUserId],  
		[Name],[Class],[RollNo],[Session] ,[Board],[Password],[NameAbbr],[UserCode],[CreatedBy],[IPAddress],[Status],[AdmissionNo] ,[AccountCode],[ParentName],[DateOfBirth]  )   
		select [Id],[UserExcelMetaDataId],[MasterClassId],[MasterBoardId],[AspNetUserId],[UpdateUserId],  
		[Name],[Class],[RollNo],[Session] ,[Board],[Password],[NameAbbr],[UserCode],[CreatedBy],[IPAddress],  
		[Status],[AdmissionNo] ,[AccountCode],[ParentName],[DateOfBirth]   From cteUserExcelData    
   
		INSERT INTO [dbo].[AspNetUsers] ([Id],[FirstName],[LastName],[Gender],[DOB],[MobNo] ,[EmailId],[SecurityQuestion]      
		,[SecurityAnswer],[eUserName],[ePassword],[MobValidate],[EmailValidate] ,[LoginMode],[LoginThirdParty],      
		[LoginSourse] ,[LastLogin],[Image],[dtmCreate],[dtmUpdate],[dtmDelete] ,[Status],[TimeZone],[AccessLevels]  ,      
		[DisplayOrder],[Email] ,[EmailConfirmed],[PasswordHash],[SecurityStamp],[PhoneNumber] ,[PhoneNumberConfirmed]      
		,[TwoFactorEnabled],[LockoutEndDateUtc] ,[LockoutEnabled],[AccessFailedCount] ,[UserName],      
		UserExcelMetaDataId,UniqueId ,FromUpload)      
		select AspNetUserId,[Name],'',-1,[DateOfBirth],'','','What is your name?'      
		,[Name],UserCode,[Password],0,0,-1,0      
		,3,getdate(),'',getdate(),getdate(),null,1,'',''      
		,0,'',0,[Password],newid(),'',0      
		,0,'1-1-1900' ,0,0 ,UserCode,@UserExcelMetaDataId,newid(),1      
		from @TempTable      
      
		INSERT INTO [dbo].[AspNetUserRoles]        
		([UserId] ,[RoleId])        
		select AspNetUserId,'06d971e6-7b5d-4ba9-9269-dc3ff5f2c00b' from  @TempTable  
    
		INSERT INTO [dbo].[UserDetail]      
		([UseDetailId],[AspNetUserId],[MasterClassId],[MasterBoardId],[SchoolId],[UserCode],[Name],[RollNo],      
		[Session],[ContactNo],[Address],[ExpiyDate],[CreatedDate],[CreatedBy],[UpdatedBy],[IpAddress],
		[AdmissionNo] ,[AccountCode],[ParentName],[DateOfBirth])  
		select Id, AspNetUserId,MasterClassId,MasterBoardId,@SchoolId ,UserCode,[Name],RollNo,      
		[Session],'','',DATEADD(year,1.6,getdate()),getdate(), @CreatedBy,@CreatedBy,@IpAddress,      
		[AdmissionNo] ,[AccountCode],[ParentName],[DateOfBirth] from  @TempTable        
      
		declare @Title nvarchar(1000),@usercount int,@LoopCount int     
	
		select @LoopCount=isnull(LoopCount,1) from dbo.UserExcelMetaData where [Id]=@UserExcelMetaDataId    
    
		Update dbo.[UserExcelData]    set [Status]=0  
		where Id in(select Id From @TempTable)   
		select @usercount=isnull(count(1),0) from dbo.[UserExcelData]    where [Status]=0   
		and  [UserExcelMetaDataId]=@UserExcelMetaDataId   
		
		update dbo.UserExcelMetaData       
		set [Status]=0,  
		LoopCount=isnull(LoopCount,0)+1,
		FileMetaData=cast (@usercount as varchar)+' students inserted successfully .'      
		where [Id]=@UserExcelMetaDataId   
        
   
		select @Rowcount=count(1) from @TempTable 
		set @Message=cast (@usercount as varchar)+' students inserted successfully .'   
		set @IImage=''        
		set @IId=@UserExcelMetaDataId         
	  --set @Message=@Title+ ' '+cast (@usercount as varchar)+' students inserted successfully.'        
	  set @result =1       
   commit transaction        
 END TRY                    
 BEGIN CATCH                   
 set @result=-1                   
 set @Message=ERROR_MESSAGE()        
 set @IId =''          
 set @IImage =''        
  --SELECT ERROR_NUMBER() AS ErrorNumber                  
  -- ,ERROR_SEVERITY() AS ErrorSeverity                  
  -- ,ERROR_STATE() AS ErrorState       
  -- ,ERROR_PROCEDURE() AS ErrorProcedure                  
  -- ,ERROR_LINE() AS ErrorLine                  
  -- ,ERROR_MESSAGE() AS ErrorMessage                     
  rollback transaction                    
 END CATCH                   
   return --return from procedure successfully                     
END 
GO
/****** Object:  StoredProcedure [dbo].[InsertUpdateBulkStudent_Bp]    Script Date: 19-06-2023 09:02:50 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE  PROCEDURE  [dbo].[InsertUpdateBulkStudent_Bp]              
 (       
	  @UserExcelMetaDataId [nvarchar](128)  ,    
	  @SchoolId [nvarchar](128)  ,    
	  @CreatedBy  [nvarchar](128)  ,    
	  @IPaddress [varchar](50) ,     
	  @result   int  output ,        
	  @IId [nvarchar](128) output ,    
	  @IImage  varchar(500) output,    
	  @Message varchar(500) output    
 )              
As              
BEGIN          
 begin transaction  
 BEGIN TRY    
  
	 Declare @TempTable table        
	 (      
		  Id nvarchar(128) ,   
		  AspNetUserId nvarchar(128),    
		  UserDetailId nvarchar(128),    
		  UserExcelMetaDataId nvarchar(128),    
		  MasterClassId bigint  ,  
		  MasterBoardId bigint ,   
		  [Name] nvarchar(500),    
		  Class nvarchar(200),    
		  RollNo varchar(50) ,   
		  [Session] varchar(50) ,   
		  Board nvarchar(500),    
		  [Password] nvarchar(MAX),  
		  CreatedBy nvarchar(128),   
		  IPAddress varchar(50),  
		  UserCode nvarchar(200)  
	 );      
	 with cteUserExcelData as  
	 (  
		  select [Id],[UserExcelMetaDataId],[Name] ,[Class],[RollNo],[Session],[Board],  
		  [Password] ,[CreatedBy], [IPAddress]From dbo.[UserExcelData]   
		  where   UserExcelMetaDataId=@UserExcelMetaDataId  
	 ),  
	 cteMasterClass as  
	 (  
		select  Id ,Title from  MasterClass where [Status]=1  
	 ),  
	 cteMasterBoard as  
	 (  
		 select  Id ,Title from  MasterBoard where [Status]=1      
	 )  
	 insert into @TempTable(Id,UserExcelMetaDataId,AspNetUserId,UserDetailId,MasterClassId,MasterBoardId,[Name],    
	 Class,RollNo,[Session],Board,[Password],CreatedBy,IPAddress,UserCode)    
	 select a.[Id],a.[UserExcelMetaDataId],newid(),newid(),b.Id MasterClassId,c.Id MasterBoardId,a.[Name] ,  
	 a.[Class],a.[RollNo],a.[Session],a.[Board],a.[Password] ,a.[CreatedBy], a.[IPAddress],  
	 dbo.GetStudentCode(dbo.fnNameAbbrevation(ltrim(rtrim(isnull(a.[Name] ,'')))))  
	 From cteUserExcelData a with (nolock)  
	 left join cteMasterClass  b with (nolock) on a.[Class]=b.Title  
	 left join cteMasterBoard c with (nolock) on a.[Board]=c.Title  
	 where  isnull(b.Id,0)<> 0 and  isnull(c.Id,0)<> 0   
	 
	 Declare @TempTableDelete table        
	 (      
	  AspNetUserId nvarchar(128) ,   
	  UserDetailId nvarchar(128)  
	 );   
  
	 insert into @TempTableDelete(AspNetUserId,UserDetailId)  
	 select a.AspNetUserId,a.UseDetailId From UserDetail a  
	 left join @TempTable b on a.Session=b.Session   
	 and a.RollNo=b.RollNo and a.MasterClassId=b.MasterClassId  
	 and  a.MasterBoardId=b.MasterBoardId    
  
	 delete from dbo.UserDetail where UseDetailId in (select UseDetailId from @TempTableDelete )  
	 delete from dbo.AspNetUsers where Id in (select AspNetUserId from @TempTableDelete )    
     
	 INSERT INTO [dbo].[AspNetUsers] ([Id],[FirstName],[LastName],[Gender],[DOB],[MobNo] ,[EmailId],[SecurityQuestion]  
	 ,[SecurityAnswer],[eUserName],[ePassword],[MobValidate],[EmailValidate] ,[LoginMode],[LoginThirdParty],  
	 [LoginSourse] ,[LastLogin],[Image],[dtmCreate],[dtmUpdate],[dtmDelete] ,[Status],[TimeZone],[AccessLevels]  ,  
	 [DisplayOrder],[Email] ,[EmailConfirmed],[PasswordHash],[SecurityStamp],[PhoneNumber] ,[PhoneNumberConfirmed]  
	 ,[TwoFactorEnabled],[LockoutEndDateUtc] ,[LockoutEnabled],[AccessFailedCount] ,[UserName],  
	 UserExcelMetaDataId,UniqueId ,FromUpload)  
	 select AspNetUserId,[Name],'',-1,'1-1-1900','','','Wahat is your name?'  
	 ,[Name],UserCode,[Password],0,0,-1,0  
	 ,3,getdate(),'',getdate(),getdate(),null,1,'',''  
	 ,0,'',0,[Password],newid(),'',0  
	 ,0,'1-1-1900' ,0,0 ,UserCode,@UserExcelMetaDataId,newid(),1  
	 from @TempTable  
  
	 INSERT INTO [dbo].[AspNetUserRoles]    
	 ([UserId] ,[RoleId])    
	 select AspNetUserId,'06d971e6-7b5d-4ba9-9269-dc3ff5f2c00b' from @TempTable    
    
  
	 INSERT INTO [dbo].[UserDetail]  
	 ([UseDetailId],[AspNetUserId],[MasterClassId],[MasterBoardId],[SchoolId],[UserCode],[Name],[RollNo],  
	 [Session],[ContactNo],[Address],[ExpiyDate],[CreatedDate],[CreatedBy],[UpdatedBy],[IpAddress])      
	 select UserDetailId, AspNetUserId,MasterClassId,MasterBoardId,@SchoolId ,UserCode,[Name],RollNo,  
	 [Session],'','',DATEADD(year,1.6,getdate()),getdate(), @CreatedBy,@CreatedBy,@IpAddress  
	 from @TempTable  
	 
	 declare @Title nvarchar(1000),@usercount int  
	 select @usercount=count(1) from @TempTable  
	 update dbo.UserExcelMetaData   
	 set [Status]=0,FileMetaData='File has been processed and inserted '+cast (@usercount as varchar)+' students.'  
	 where [Id]=@UserExcelMetaDataId  
  
  
   
	 select @Title=isnull(@Title,'') from [dbo].[School] with (nolock) where Id =@SchoolId   
	 set @IImage=''    
	 set @IId=@UserExcelMetaDataId     
	 set @Message=@Title+ ' '+cast (@usercount as varchar)+' students inserted successfully.'    
	 set @result =1   
   commit transaction    
 END TRY                
 BEGIN CATCH               
 set @result=-1               
 set @Message=ERROR_MESSAGE()    
 set @IId =''      
 set @IImage =''    
  --SELECT ERROR_NUMBER() AS ErrorNumber              
  -- ,ERROR_SEVERITY() AS ErrorSeverity              
  -- ,ERROR_STATE() AS ErrorState              
  -- ,ERROR_PROCEDURE() AS ErrorProcedure              
  -- ,ERROR_LINE() AS ErrorLine              
  -- ,ERROR_MESSAGE() AS ErrorMessage                 
  rollback transaction                
 END CATCH               
   return --return from procedure successfully                 
END     
GO
/****** Object:  StoredProcedure [dbo].[InsertUpdateBulkStudentsBoard]    Script Date: 19-06-2023 09:02:50 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
CREATE  PROCEDURE  [dbo].[InsertUpdateBulkStudentsBoard]              
 (       
	  @UserExcelMetaDataId [nvarchar](128)  ,    
	  @SchoolId [nvarchar](128)  ,    
	  @CreatedBy  [nvarchar](128)  ,    
	  @IPaddress [varchar](50) ,     
	  @result   int  output ,    
	  @Message varchar(500) output    
 )              
As              
BEGIN          
 begin transaction  
 BEGIN TRY  
	update dbo.UserExcelData  
	set   MasterBoardId = b.Id,
    NameAbbr=dbo.fnNameAbbrevation(ltrim(rtrim(isnull([Name] ,''))))
	from dbo.UserExcelData a  
	left join  MasterBoard b on
	a.Board = b.Title 
	where UserExcelMetaDataId=@UserExcelMetaDataId 
	set @Message='Updated '+cast(@@rowcount as varchar)+'  students board.'    
	set @result =1   
   commit transaction    
 END TRY                
 BEGIN CATCH               
 set @result=-1               
 set @Message=ERROR_MESSAGE()    
     
  --SELECT ERROR_NUMBER() AS ErrorNumber              
  -- ,ERROR_SEVERITY() AS ErrorSeverity              
  -- ,ERROR_STATE() AS ErrorState              
  -- ,ERROR_PROCEDURE() AS ErrorProcedure              
  -- ,ERROR_LINE() AS ErrorLine              
  -- ,ERROR_MESSAGE() AS ErrorMessage                 
  rollback transaction                
 END CATCH               
   return --return from procedure successfully                 
END     
GO
/****** Object:  StoredProcedure [dbo].[InsertUpdateBulkStudentsClass]    Script Date: 19-06-2023 09:02:50 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
CREATE  PROCEDURE  [dbo].[InsertUpdateBulkStudentsClass]              
 (       
	  @UserExcelMetaDataId [nvarchar](128)  ,    
	  @SchoolId [nvarchar](128)  ,    
	  @CreatedBy  [nvarchar](128)  ,    
	  @IPaddress [varchar](50) ,     
	  @result   int  output ,    
	  @Message varchar(500) output    
 )              
As              
BEGIN          
 begin transaction  
 BEGIN TRY  
	 
	update dbo.UserExcelData
	set  MasterClassId = b.Id,
	UserCode	=dbo.GetStudentCode(NameAbbr)
	from dbo.UserExcelData a  
	left join  MasterClass b on
	a.Class = b.Title 
	where UserExcelMetaDataId=@UserExcelMetaDataId 
	set @Message='Updated '+cast(@@rowcount as varchar)+'  students class.'    
	set @result =1   
   commit transaction    
 END TRY                
 BEGIN CATCH               
 set @result=-1               
 set @Message=ERROR_MESSAGE()    
     
  --SELECT ERROR_NUMBER() AS ErrorNumber              
  -- ,ERROR_SEVERITY() AS ErrorSeverity              
  -- ,ERROR_STATE() AS ErrorState              
  -- ,ERROR_PROCEDURE() AS ErrorProcedure              
  -- ,ERROR_LINE() AS ErrorLine              
  -- ,ERROR_MESSAGE() AS ErrorMessage                 
  rollback transaction                
 END CATCH               
   return --return from procedure successfully                 
END     
GO
/****** Object:  StoredProcedure [dbo].[InsertUpdateDeleteMasterBoard]    Script Date: 19-06-2023 09:02:50 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE  PROCEDURE  [dbo].[InsertUpdateDeleteMasterBoard]            
 (     
	 @Id bigint,  
	 @MasterPublisherId bigint,  
	 @GlobalId nvarchar(128) ,  
	 @Title nvarchar(max) ,  
	 @DisplayOrder [int] ,  
	 @Image varchar(200) ,  
	 @Description nvarchar(max) ,   
	 @IPAddress varchar(50) ,  
	 @AspNetUserId nvarchar(128) ,   
	 @Status [int] ,  
	 @Action int ,--0 insert ,1 update, 2 delete  
	 @result   int  output ,      
	 @IId bigint output ,  
	 @IImage  varchar(200) output,  
	 @Message varchar(500) output  
 )            
As            
BEGIN        
	begin transaction    
	declare @isexist int  
	set @Title=ltrim(rtrim(isnull(@Title,'')))  
	set @Description=ltrim(rtrim(isnull(@Description,'')))  
	BEGIN TRY      
	if isnull(@id,0)=0  
	begin  
		select @isexist=count(1) from MasterBoard where  lower(@Title)=lower(title)  
	end  
	else  
	begin  
		select @isexist=count(1) from MasterBoard where lower(@Title)=lower(title) and id<>@Id  
	end  
  
	if @isexist=0  
	begin  
		if  not exists(select Id from MasterBoard where Id=@Id )            
		begin  
			if isnull(@DisplayOrder,0)=0  
			begin  
				select @DisplayOrder=count(1)+1 from MasterBoard  
			end  
			INSERT INTO [dbo].MasterBoard  
			([GlobalId],[Title],[DisplayOrder],[Image],[Description],[CreatedDate]  
			,[UpdatedDate],[IPAddress],[CreatedBy],[UpdatedBy],[Status])  
			VALUES(@GlobalId,@Title,isnull(@DisplayOrder,0),isnull(@Image,''),isnull(@Description,''),getdate()  
			,getdate(),@IPAddress,@AspNetUserId,@AspNetUserId,1)        
			set @IId=SCOPE_IDENTITY()   
			set @Message=isnull(@Title,'') +' inserted successfully.'  
			set @result =1  
		end            
		else if  @Action<>2           
		begin       
			update dbo.MasterBoard            
			set    
			[Title]  =isnull(@Title,''),    
			[DisplayOrder] =@DisplayOrder,  
			[Image] =isnull(@Image,''),       
			[Description] =isnull(@Description,''),       
			[UpdatedDate] =getdate(),   
			[UpdatedBy]=@AspNetUserId,  
			[IPAddress]  =@IPaddress  
			where Id=@Id   
			set  @IId=@Id    
			set @Message=isnull(@Title,'') +' updated successfully.'  
			set @result =1     
		end      
		else   
		begin  
			select  @Title=isnull(Title,''),@IImage=isnull([Image],'') from dbo.MasterBoard  where Id=@Id   
			if  not exists(select Id from MasterBooks where [MasterBoardId]=@Id )   
			begin  
			delete from dbo.MasterBoard  where Id=@Id    
			set @IId=@Id    
			set @Message=isnull(@Title,'') +' deleted successfully.'  
			set @result =1  
		end  
	else  
	begin    
		set @IId=@Id    
		set @Message=isnull(@Title,'') +' is not allowed to be delete it is used by another process.'  
		set @result =3  
	end  
	end  
	end  
	else  
	begin  
	set @IId=@Id    
	set @Message=isnull(@Title,'') +' | already exist in database. Please try another name.'  
	set @IImage=''  
	set @result =3  
	end  
	commit transaction              
	END TRY              
	BEGIN CATCH             
	set @result=-1             
	set @Message=ERROR_MESSAGE()  
	set @IId =0    
	set @IImage =''  
	--SELECT ERROR_NUMBER() AS ErrorNumber            
	-- ,ERROR_SEVERITY() AS ErrorSeverity            
	-- ,ERROR_STATE() AS ErrorState            
	-- ,ERROR_PROCEDURE() AS ErrorProcedure            
	-- ,ERROR_LINE() AS ErrorLine            
	-- ,ERROR_MESSAGE() AS ErrorMessage               
	rollback transaction              
	END CATCH             
	return --return from procedure successfully               
END   
GO
/****** Object:  StoredProcedure [dbo].[InsertUpdateDeleteMasterBooks]    Script Date: 19-06-2023 09:02:50 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
CREATE  PROCEDURE  [dbo].[InsertUpdateDeleteMasterBooks]          
 (   
	@Id [nvarchar](128)   ,
	@MasterCategoryId [bigint] ,
	@MasterClassId [bigint] ,
	@MasterSubjectId [bigint] ,
	@MasterSeriesId [bigint] ,
	@MasterBoardId [bigint] ,
	@Title [nvarchar](1000) ,
	@Author [nvarchar](1000) ,
	@ISBN [varchar](50) ,
	@Edition [varchar](50) ,
	@Image [varchar](150) ,
	@Description [nvarchar](max) ,
	@PageTitle [nvarchar](500) ,
	@MetaDescription [nvarchar](1000) ,
	@OgTitle [nvarchar](500) ,
	@OgDescription [nvarchar](1000) ,
	@TwitterTitle [nvarchar](500) ,
	@TwitterDescription [nvarchar](1000) ,
	@KeyWords [nvarchar](1000) ,
	@ParentId [bigint] ,  
	@BannerImage [nvarchar](150) ,
	@ServerId [nvarchar](128) ,
	@EncriptionKey [nvarchar](200) ,
	@isSize [varchar](50) ,
	@EbookPrice [decimal](18, 2) ,
	@PrintPrice [decimal](18, 2) ,
	@Discount [decimal](10, 2) ,
	@Colour [int] ,
	@EbookSizeMB [bigint] ,
	@Ebook [int] ,
	@Pbook [int] ,
	@Audio [int] ,
	@EBookType [int] ,
	@AspNetUserId [nvarchar](128) , 
	@Status [tinyint] ,
	@IPaddress [varchar](20) ,
	@Action int ,--0 insert ,1 update, 2 delete
	@result   int  output ,    
	@IId [nvarchar](128) output ,
	@IImage  varchar(500) output,
	@Message varchar(500) output
 )          
As          
BEGIN      
 begin transaction  
	declare @isexist int,@ShortCode [nvarchar](150) ,@DisplayOrder [smallint]  
	set @Title=ltrim(rtrim(isnull(@Title,'')))
	set @Description=ltrim(rtrim(isnull(@Description,'')))  
	set @Author =ltrim(rtrim(isnull(@Author ,'')))  
	set @ISBN =ltrim(rtrim(isnull(@ISBN ,''))) 
	set @Edition =ltrim(rtrim(isnull(@Edition ,''))) 
	set @Image =ltrim(rtrim(isnull(@Image ,''))) 
	set @Description=ltrim(rtrim(isnull(@Description ,''))) 
	set @PageTitle =ltrim(rtrim(isnull(@PageTitle ,''))) 
	set @MetaDescription =ltrim(rtrim(isnull(@MetaDescription ,'')))  
	set @OgTitle =ltrim(rtrim(isnull(@OgTitle ,''))) 
	set @OgDescription =ltrim(rtrim(isnull(@OgDescription ,'')))  
	set @TwitterTitle =ltrim(rtrim(isnull(@TwitterTitle ,''))) 
	set @TwitterDescription =ltrim(rtrim(isnull(@TwitterDescription ,'')))  
	set @KeyWords =ltrim(rtrim(isnull(@KeyWords ,'')))   
	set @ShortCode =dbo.fnNameAbbrevation(ltrim(rtrim(isnull(@Title ,''))))  
	set @BannerImage =ltrim(rtrim(isnull(@BannerImage ,'')))  
	set @EncriptionKey=ltrim(rtrim(isnull(@EncriptionKey ,''))) 
	set @isSize =ltrim(rtrim(isnull(@isSize ,0.0))) 
	set @EbookPrice =ltrim(rtrim(isnull(@EbookPrice ,0.0))) 
	set @PrintPrice =ltrim(rtrim(isnull(@PrintPrice ,0.0))) 
	set @Discount =ltrim(rtrim(isnull(@Discount ,0.0))) 
	set @Colour =ltrim(rtrim(isnull(@Colour ,0))) 
	set @EbookSizeMB  =ltrim(rtrim(isnull(@Colour ,0))) 
	set @Ebook  =ltrim(rtrim(isnull(@Ebook ,0))) 
	set @Pbook  =ltrim(rtrim(isnull(@Pbook ,0))) 
	set @Audio  =ltrim(rtrim(isnull(@Audio ,0))) 
	set @EBookType  =ltrim(rtrim(isnull(@EBookType ,0))) 
 BEGIN TRY    
	declare @_image [varchar](150),@_bimage [varchar](150)
	select @_image=  isnull([Image],'')  ,@_bimage=   isnull(BannerImage,'')  
	from  [dbo].[MasterBooks] where Id =@Id
   if @Action=0
   begin

	if isnull(@DisplayOrder,0)=0
	begin
		select @DisplayOrder=count(1)+1 from MasterBooks
	end	
	set @ShortCode =dbo.fnNameAbbrevation(ltrim(rtrim(isnull(@Title ,'')))) +'-'+cast (@DisplayOrder as varchar)
	select @MasterCategoryId	 
	INSERT INTO [dbo].[MasterBooks] 

	([Id],[MasterCategoryId],[Title],[Author],[ISBN],[Edition],[Image],[Description],[PageTitle],[MetaDescription]
	,[OgTitle],[OgDescription],[TwitterTitle],[TwitterDescription],[KeyWords],[ParentId],[ShortCode],[DisplayOrder]
	,[BannerImage],[ServerId],[EncriptionKey],[isSize],[EbookPrice],[PrintPrice],[Discount],[Colour],[EbookSize(MB)]
	,[Ebook],[Pbook],[Audio],[EBookType],[CreatedBy],[UpdatedBy],[CreateDate],[UpdateDate],[Status],[IPaddress],
	[MasterClassId] ,[MasterSubjectId],[MasterSeriesId],[MasterBoardId]) 
	VALUES (@Id,@MasterCategoryId,@Title,@Author,@ISBN,@Edition,@Image,@Description,@PageTitle,@MetaDescription
	,@OgTitle,@OgDescription,@TwitterTitle,@TwitterDescription,@KeyWords,@ParentId,@ShortCode,@DisplayOrder
	,@BannerImage,@ServerId,@EncriptionKey,@isSize,@EbookPrice,@PrintPrice,@Discount,@Colour,@EbookSizeMB
	,@Ebook,@Pbook,@Audio,@EBookType,@AspNetUserId,@AspNetUserId,getdate(),getdate(),1,@IPaddress,
	@MasterClassId ,@MasterSubjectId,@MasterSeriesId,@MasterBoardId)	
	set @IImage=''
	set @IId=@Id 
	set @Message=isnull(@Title,'') +' inserted successfully.'
	set @result =1
	
   end
   if @Action=1
   begin 
	if @Image='' and @_image<>''
	begin
		set @Image=@_image
		set @IImage=@_image
	end
	if @BannerImage='' and @_bimage<>''
	begin
		set @BannerImage=@_bimage
		set @IImage=@IImage+ ','+@_bimage
	end
	Update [dbo].[MasterBooks]
	 set  [MasterCategoryId]=@MasterCategoryId,
		[Title] =@Title,
		[Author] =@Author, 
		[ISBN] =@ISBN, 
		[Edition] =@Edition, 
		[Image] =@Image, 
		[Description] =@Description, 
		[PageTitle] =@PageTitle,
		[MetaDescription]=@MetaDescription,
		[OgTitle] =@OgTitle, 
		[OgDescription] =@OgDescription, 
		[TwitterTitle] =@TwitterTitle,
		[TwitterDescription]=@TwitterDescription, 
		[KeyWords] =@KeyWords, 
		[ParentId] =@ParentId,
		[ShortCode] =@ShortCode, 
		[DisplayOrder]=@DisplayOrder,
		[BannerImage] =@BannerImage, 
		[ServerId] =@ServerId, 
		[EncriptionKey] =@EncriptionKey, 
		[isSize] =@isSize, 
		[EbookPrice] =@EbookPrice, 
		[PrintPrice] =@PrintPrice, 
		[Discount] =@Discount, 
		[Colour] =@Colour, 
		[EbookSize(MB)]=@EbookSizeMB,
		[Ebook] =@Ebook, 
		[Pbook] =@Pbook, 
		[Audio] =@Audio,
		[EBookType] =@EBookType,
		[UpdatedBy] =@AspnetUserId, 
		[UpdateDate] =getdate(), 
		[MasterClassId]=@MasterClassId ,
		[MasterSubjectId]=@MasterSubjectId,
		[MasterSeriesId]=@MasterSeriesId,
		[MasterBoardId]=@MasterBoardId,
		[IPaddress] =@IPaddress
		where Id=@Id  
	set @IId=@Id 
	set @Message=isnull(@Title,'') +' updated successfully.'
	set @result =1
   end
   if @Action=2
   begin 
    if not exists(select Id from MyLibrary where MasterBookId=@Id )    
	begin
		delete from MasterBooks where Id=@Id
		set @IImage=@_image +','+@_bimage 
		set @IId=@Id 
		set @Message=isnull(@Title,'') +' deleted successfully.'
		set @result =1
	end 
	else
	begin
		set @IImage=''
		set @IId=@Id 
		set @Message='you are not allowed to be delete book :'+@Title+', it is used another process.'
		set @result =-1
	end 
   end
   commit transaction      
    
 END TRY            
 BEGIN CATCH           
	set @result=-1           
	set @Message=ERROR_MESSAGE()
	set @IId =''  
	set @IImage =''
  --SELECT ERROR_NUMBER() AS ErrorNumber          
  -- ,ERROR_SEVERITY() AS ErrorSeverity          
  -- ,ERROR_STATE() AS ErrorState          
  -- ,ERROR_PROCEDURE() AS ErrorProcedure          
  -- ,ERROR_LINE() AS ErrorLine          
  -- ,ERROR_MESSAGE() AS ErrorMessage             
  rollback transaction            
 END CATCH           
   return --return from procedure successfully             
END 
GO
/****** Object:  StoredProcedure [dbo].[InsertUpdateDeleteMasterClass]    Script Date: 19-06-2023 09:02:50 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
Create  PROCEDURE  [dbo].[InsertUpdateDeleteMasterClass]          
 (   
	@Id bigint,
	@MasterPublisherId bigint,
	@GlobalId nvarchar(128) ,
	@Title nvarchar(max) ,
	@DisplayOrder [int] ,
	@Image varchar(200) ,
	@Description nvarchar(max) ,	
	@IPAddress varchar(50) ,
	@AspNetUserId nvarchar(128) ,	
	@Status [int] ,
	@Action int ,--0 insert ,1 update, 2 delete
	@result   int  output ,    
	@IId bigint output ,
	@IImage  varchar(200) output,
	@Message varchar(500) output
 )          
As          
BEGIN      
 begin transaction  
 declare @isexist int
 set @Title=ltrim(rtrim(isnull(@Title,'')))
  set @Description=ltrim(rtrim(isnull(@Description,'')))
 BEGIN TRY    
 if isnull(@id,0)=0
 begin
  select @isexist=count(1) from MasterClass where  lower(@Title)=lower(title)
 end
 else
 begin
 select @isexist=count(1) from MasterClass where   lower(@Title)=lower(title) and id<>@Id
 end

  if @isexist=0
  begin
  if  not exists(select Id from MasterClass where Id=@Id )          
  begin 
    ---t.Title.ToLower() == Title.ToLower()) && t.Id != Id
    if isnull(@DisplayOrder,0)=0
	 begin
	  select @DisplayOrder=count(1)+1 from [MasterClass]
	 end
	
	INSERT INTO [dbo].[MasterClass]
	([Title],[DisplayOrder],[Description],[CreateDate]
	,[UpdatedDate],[IPAddress],[CreatedBy],[UpdatedBy],[Status])
	VALUES(@Title,isnull(@DisplayOrder,0),isnull(@Description,''),getdate()
	,getdate(),@IPAddress,@AspNetUserId,@AspNetUserId,1) 
	  
	 set @IId=SCOPE_IDENTITY() 
	 set @Message=isnull(@Title,'') +' inserted successfully.'
	 set @result =1
  end          
  else if  @Action<>2         
  begin	    
	update dbo.[MasterClass]          
	set  
	[Title]	 =isnull(@Title,''),	 
	[DisplayOrder] =@DisplayOrder,
	[Description] =isnull(@Description,''),				 
	[UpdatedDate] =getdate(), 
	[UpdatedBy]=@AspNetUserId,
	[IPAddress]	 =@IPaddress
	where Id=@Id 
	
	set  @IId=@Id  
	set @Message=isnull(@Title,'') +' updated successfully.'
	set @result =1   
  end    
  else 
  begin
     select  @Title=isnull(Title,'') from dbo.MasterClass  where Id=@Id 
	 if  not exists(select Id from MasterBooks where [MasterClassId]=@Id ) 
	   begin
	    delete from dbo.MasterClass  where Id=@Id	 
		set @IId=@Id  
		set @Message=isnull(@Title,'') +' deleted successfully.'
		set @result =1
	   end
	else
	begin	 
	    set @IId=@Id  
		set @Message=isnull(@Title,'') +' is not allowed to be delete it is used by another process.'
		set @result =3
	end
  end
  end
  else
  begin
	set @IId=@Id  
	set @Message=isnull(@Title,'') +' | already exist in database. Please try another name.'
	set @IImage=''
	set @result =3
  end
  commit transaction            
 END TRY            
 BEGIN CATCH           
	set @result=-1           
	set @Message=ERROR_MESSAGE()
	set @IId =0  
	set @IImage =''
  --SELECT ERROR_NUMBER() AS ErrorNumber          
  -- ,ERROR_SEVERITY() AS ErrorSeverity          
  -- ,ERROR_STATE() AS ErrorState          
  -- ,ERROR_PROCEDURE() AS ErrorProcedure          
  -- ,ERROR_LINE() AS ErrorLine          
  -- ,ERROR_MESSAGE() AS ErrorMessage             
  rollback transaction            
 END CATCH           
   return --return from procedure successfully             
END 
GO
/****** Object:  StoredProcedure [dbo].[InsertUpdateDeleteMasterSeries]    Script Date: 19-06-2023 09:02:50 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE  PROCEDURE  [dbo].[InsertUpdateDeleteMasterSeries]            
 (     
	 @Id bigint,  
	 @MasterSubjectId bigint ,  
	 @MasterPublisherId bigint,  
	 @GlobalId nvarchar(128) ,  
	 @Title nvarchar(max) ,  
	 @DisplayOrder [int] ,  
	 @Image varchar(200) ,  
	 @Description nvarchar(max) ,   
	 @IPAddress varchar(50) ,  
	 @AspNetUserId nvarchar(128) ,   
	 @Status [int] ,  
	 @Action int ,--0 insert ,1 update, 2 delete  
	 @result   int  output ,      
	 @IId bigint output ,  
	 @IImage  varchar(200) output,  
	 @Message varchar(500) output  
 )            
As            
BEGIN        
	begin transaction    
	declare @isexist int  
	set @Title=ltrim(rtrim(isnull(@Title,'')))  
	set @Description=ltrim(rtrim(isnull(@Description,''))) 
	
	BEGIN TRY      
		if isnull(@id,0)=0  
		begin  
			select @isexist=count(1) from MasterSeries 
			where MasterSubjectId=isnull(@MasterSubjectId,0)  and lower(@Title)=lower(title)  
		end  
		else  
		begin   
			select  @MasterSubjectId=isnull(MasterSubjectId,0)   from MasterSeries
			where  id=@Id  

			select @isexist=count(1) from MasterSeries
			where MasterSubjectId=isnull(@MasterSubjectId,0)  and lower(@Title)=lower(title) and id<>@Id  
		end
		
		  


		if @isexist=0  
		begin  
			if  not exists(select Id from MasterSeries where Id=@Id and MasterSubjectId=isnull(@MasterSubjectId,0) )            
			begin   
				---t.Title.ToLower() == Title.ToLower()) && t.Id != Id  
				if isnull(@DisplayOrder,0)=0  
				begin  
					select @DisplayOrder=count(1)+1 from MasterSeries  
				end  
    
				INSERT INTO [dbo].MasterSeries  
				([GlobalId],[Title],[MasterSubjectId],[DisplayOrder],[Image],[Description],[CreatedDate]  
				,[UpdatedDate],[IPAddress],[CreatedBy],[UpdatedBy],[Status])  
				VALUES(@GlobalId,@Title,@MasterSubjectId,isnull(@DisplayOrder,0),isnull(@Image,''),isnull(@Description,''),getdate()  
				,getdate(),@IPAddress,@AspNetUserId,@AspNetUserId,1)  
     
				set @IId=SCOPE_IDENTITY()   
				set @Message=isnull(@Title,'') +' inserted successfully.'  
				set @result =1  
		   end            
		else if  @Action<>2           
		begin  
		   
			update dbo.MasterSeries            
			set    
			[Title]  =isnull(@Title,''),  
			[MasterSubjectId]=@MasterSubjectId,   
			[DisplayOrder] =@DisplayOrder,  
			[Image] =isnull(@Image,''),       
			[Description] =isnull(@Description,''),       
			[UpdatedDate] =getdate(),   
			[UpdatedBy]=@AspNetUserId,  
			[IPAddress]  =@IPaddress  
			where Id=@Id   
   
			set  @IId=@Id    
			set @Message=isnull(@Title,'') +' updated successfully.'  
			set @result =1     
		end      
		else   
			begin  
			 
				select  @Title=isnull(Title,''),@IImage=isnull([Image],'') from dbo.MasterSeries  where Id=@Id 
				
				if  not exists(select Id from MasterBooks where [MasterSeriesId]=@Id )   
				begin  
				
				    delete from dbo.MasterSeries  where Id=@Id    
					set @IId=@Id    
					set @Message=isnull(@Title,'') +' deleted successfully.'  
					set @result =1  
				end  
				else  
				begin  
				
					set @IId=@Id    
					set @Message=isnull(@Title,'') +' is not allowed to be delete it is used by another process.'  
					set @result =3  
				end  
			end  
		end  
		else  
		begin  
			set @IId=@Id    
			set @Message=isnull(@Title,'') +' | already exist in database. Please try another name.'  
			set @IImage=''  
			set @result =3  
		end  
		commit transaction              
	END TRY              
	BEGIN CATCH             
		set @result=-1             
		set @Message=ERROR_MESSAGE()  
		set @IId =0    
		set @IImage =''  
		--SELECT ERROR_NUMBER() AS ErrorNumber            
		-- ,ERROR_SEVERITY() AS ErrorSeverity            
		-- ,ERROR_STATE() AS ErrorState            
		-- ,ERROR_PROCEDURE() AS ErrorProcedure            
		-- ,ERROR_LINE() AS ErrorLine            
		-- ,ERROR_MESSAGE() AS ErrorMessage               
		rollback transaction              
	END CATCH             
	return --return from procedure successfully               
END   
GO
/****** Object:  StoredProcedure [dbo].[InsertUpdateDeleteMasterSubject]    Script Date: 19-06-2023 09:02:50 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE  PROCEDURE  [dbo].[InsertUpdateDeleteMasterSubject]          
 (   
	@Id bigint,
	@MasterPublisherId bigint,
	@GlobalId nvarchar(128) ,
	@Title nvarchar(max) ,
	@DisplayOrder [int] ,
	@Image varchar(200) ,
	@Description nvarchar(max) ,	
	@IPAddress varchar(50) ,
	@AspNetUserId nvarchar(128) ,	
	@Status [int] ,
	@Action int ,--0 insert ,1 update, 2 delete
	@result   int  output ,    
	@IId bigint output ,
	@IImage  varchar(200) output,
	@Message varchar(500) output
 )          
As          
BEGIN      
 begin transaction  
 declare @isexist int
 set @Title=ltrim(rtrim(isnull(@Title,'')))
  set @Description=ltrim(rtrim(isnull(@Description,'')))
 BEGIN TRY    
 if isnull(@id,0)=0
 begin
  select @isexist=count(1) from MasterSubject where  lower(@Title)=lower(title)
 end
 else
 begin
 select @isexist=count(1) from MasterSubject where   lower(@Title)=lower(title) and id<>@Id
 end

  if @isexist=0
  begin
  if  not exists(select Id from MasterSubject where Id=@Id )          
  begin 
    ---t.Title.ToLower() == Title.ToLower()) && t.Id != Id
    if isnull(@DisplayOrder,0)=0
	 begin
	  select @DisplayOrder=count(1)+1 from MasterSubject
	 end
	
	INSERT INTO [dbo].MasterSubject
	([GlobalId],[Title],[DisplayOrder],[Image],[Description],[CreatedDate]
	,[UpdatedDate],[IPAddress],[CreatedBy],[UpdatedBy],[Status])
	VALUES(@GlobalId,@Title,isnull(@DisplayOrder,0),isnull(@Image,''),isnull(@Description,''),getdate()
	,getdate(),@IPAddress,@AspNetUserId,@AspNetUserId,1) 
	  
	 set @IId=SCOPE_IDENTITY() 
	 set @Message=isnull(@Title,'') +' inserted successfully.'
	 set @result =1
  end          
  else if  @Action<>2         
  begin	    
	update dbo.MasterSubject          
	set  
	[Title]	 =isnull(@Title,''),
	[DisplayOrder] =@DisplayOrder,	 
	[Image] =isnull(@Image,''),				 
	[Description] =isnull(@Description,''),				 
	[UpdatedDate] =getdate(), 
	[UpdatedBy]=@AspNetUserId,
	[IPAddress]	 =@IPaddress
	where Id=@Id 
	
	set  @IId=@Id  
	set @Message=isnull(@Title,'') +' updated successfully.'
	set @result =1   
  end    
  else 
  begin
     select  @Title=isnull(Title,''),@IImage=isnull([Image],'') from dbo.MasterSubject  where Id=@Id 
	 if  not exists(select Id from MasterSeries where [MasterSubjectId]=@Id ) 
	   begin
	    delete from dbo.MasterSubject  where Id=@Id	 
		set @IId=@Id  
		set @Message=isnull(@Title,'') +' deleted successfully.'
		set @result =1
	   end
	else
	begin	 
	    set @IId=@Id  
		set @Message=isnull(@Title,'') +' is not allowed to be delete it is used by another process.'
		set @result =3
	end
  end
  end
  else
  begin
	set @IId=@Id  
	set @Message=isnull(@Title,'') +' | already exist in database. Please try another name.'
	set @IImage=''
	set @result =3
  end
  commit transaction            
 END TRY            
 BEGIN CATCH           
	set @result=-1           
	set @Message=ERROR_MESSAGE()
	set @IId =0  
	set @IImage =''
  --SELECT ERROR_NUMBER() AS ErrorNumber          
  -- ,ERROR_SEVERITY() AS ErrorSeverity          
  -- ,ERROR_STATE() AS ErrorState          
  -- ,ERROR_PROCEDURE() AS ErrorProcedure          
  -- ,ERROR_LINE() AS ErrorLine          
  -- ,ERROR_MESSAGE() AS ErrorMessage             
  rollback transaction            
 END CATCH           
   return --return from procedure successfully             
END 

GO
/****** Object:  StoredProcedure [dbo].[InsertUpdateDeleteMyLibrary]    Script Date: 19-06-2023 09:02:50 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE  PROCEDURE  [dbo].[InsertUpdateDeleteMyLibrary]          
 (   
	@Id [nvarchar](128) ,
	@MasterBookId [nvarchar](128) ,
	@AspNetUserId [nvarchar](128) , 
	@CreatedBy [nvarchar](128) ,
	@Validity [int] ,
	@LastDate [datetime] , 
	@Status [tinyint] ,
	@IPaddress [varchar](20) , 
	@Action int ,--0 insert ,1 update, 2 delete
	@result   int  output ,    
	@IId [nvarchar](128) output ,
	@IImage  varchar(500) output,
	@Message varchar(500) output
 )          
As          
BEGIN      
 begin transaction  
	declare @Title varchar(500)
	select @Title=isnull(Title,'') from dbo.MasterBooks where [Id]=@MasterBookId 
 BEGIN TRY  
   if @Action=0 
   begin 
    if not exists (select Id from [dbo].[MyLibrary] where [MasterBookId]=@MasterBookId and [AspNetUserId]=@AspNetUserId)
	begin
		INSERT INTO [dbo].[MyLibrary]
           ([Id],[MasterBookId],[AspNetUserId],[CreatedBy],[UpdatedBy],[Validity],[LastDate],[CreateDate]
           ,[UpdateDate],[Status],[IPaddress])
			values  (@Id,@MasterBookId,@AspNetUserId,@CreatedBy,@CreatedBy,@Validity,@LastDate,getdate()
			,getdate(),@Status,@IPaddress)
		set @IImage=''
		set @IId=@Id 
		set @Message=@Title +' inserted successfully.'
		set @result =1
	end
	else
	begin
		set @IImage=''
		set @IId=@Id 
		set @Message=@Title +' already in your library.'
		set @result =-1
	end 
   end
   if @Action=1
   begin  
	Update [dbo].[MyLibrary]
	set  
	[MasterBookId]=@MasterBookId,
	[AspNetUserId]=@AspNetUserId,
	[UpdatedBy]=@CreatedBy,
	[Validity]=@Validity,
	[LastDate]		=@LastDate,	  
	[UpdateDate]=getdate(),
	[IPaddress] =@IPaddress  
	where Id=@Id			 
	set @IId=@Id 
	set @Message=@Title +' updated successfully.'
	set @result =1
   end
   if @Action=2
   begin 
   Update [dbo].[MyLibrary]
   set [Status]=2,	  
	[UpdateDate]=getdate(),
	[IPaddress] =@IPaddress  
	where Id=@Id			 
	set @IId=@Id 
	set @Message=@Title +' deleted successfully.'
	set @result =1
	set @result =1
   end
  commit transaction            
 END TRY            
 BEGIN CATCH           
	set @result=-1           
	set @Message=ERROR_MESSAGE()
	set @IId =''  
	set @IImage =''
  --SELECT ERROR_NUMBER() AS ErrorNumber          
  -- ,ERROR_SEVERITY() AS ErrorSeverity          
  -- ,ERROR_STATE() AS ErrorState          
  -- ,ERROR_PROCEDURE() AS ErrorProcedure          
  -- ,ERROR_LINE() AS ErrorLine          
  -- ,ERROR_MESSAGE() AS ErrorMessage             
  rollback transaction            
 END CATCH           
   return --return from procedure successfully             
END 
GO
/****** Object:  StoredProcedure [dbo].[InsertUpdateDeleteUserBooks]    Script Date: 19-06-2023 09:02:50 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
CREATE  PROCEDURE  [dbo].[InsertUpdateDeleteUserBooks]            
 (      
		@AspNetUserId nvarchar(128) , 
		@MasterBookId  [nvarchar](128)  ,
		@CreatedBy  [nvarchar](128)  , 
		@IPAddress varchar(50) , 
		@Action int ,--0 insert ,1 update, 2 delete  
		@result   int  output ,      
		@IId bigint output ,   
		@Message varchar(500) output  
 )            
As            
BEGIN        
	begin transaction    
	declare @isexist int  , @Title as nvarchar(1000) 
	BEGIN TRY      
	select @isexist=count(1) from [UserBooks] where   AspNetUserId=@AspNetUserId and MasterBookId=@MasterBookId
    select @Title=Title from MasterBooks where Id=@MasterBookId
  
	if @isexist=0  and  @Action=0
	begin  
        insert into UserBooks(Id, AspNetUserId, MasterBookId, CreatedBy, UpdatedBy, CreateDate, UpdateDate, Status, IPaddress)
		values(newid(), @AspNetUserId, @MasterBookId, @CreatedBy, @CreatedBy, getdate(), getdate(), 1, @IPaddress)
		set @IId=1    
		set @Message=isnull(@Title,'') +' | book assigned to student.'  	 
		set @result =1         
 	end  
	else if  @isexist>1  and  @Action=2
	begin  
		delete from UserBooks where AspNetUserId=@AspNetUserId and  MasterBookId=@MasterBookId
		set @IId=2    
		set @Message=isnull(@Title,'') +' | book unassigned  to student.'  	 
		set @result =2  
	end  
	commit transaction              
	END TRY              
	BEGIN CATCH             
	set @result=-1             
	set @Message=ERROR_MESSAGE()  
	set @IId =0    
	 
	--SELECT ERROR_NUMBER() AS ErrorNumber            
	-- ,ERROR_SEVERITY() AS ErrorSeverity            
	-- ,ERROR_STATE() AS ErrorState            
	-- ,ERROR_PROCEDURE() AS ErrorProcedure            
	-- ,ERROR_LINE() AS ErrorLine            
	-- ,ERROR_MESSAGE() AS ErrorMessage               
	rollback transaction              
	END CATCH             
	return --return from procedure successfully               
END   
GO
/****** Object:  StoredProcedure [dbo].[InsertUpdateSchool]    Script Date: 19-06-2023 09:02:50 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
   
CREATE  PROCEDURE  [dbo].[InsertUpdateSchool]            
 (     
 @Id [nvarchar](128)  ,  
 @AspNetUserId [nvarchar](128)  ,  
 @Title  [nvarchar](1000)  ,  
 @EmailId  [nvarchar](200)  ,  
 @Logo  [nvarchar](200)  ,  
 @ContactNo  [nvarchar](50)  ,  
 @AlterNateContactNo  [nvarchar](50)  ,  
 @Principle  [nvarchar](500)  ,  
 @PrincipleContactNo  [nvarchar](50)  ,  
 @AddressLine1 [nvarchar](500)  ,  
 @AddressLine2 [nvarchar](500)  ,  
 @AddressLine3 [nvarchar](500)  ,  
 @State [nvarchar](500)  ,  
 @City [nvarchar](500)  ,  
 @Pincode [nvarchar](10)  ,  
 @Password [nvarchar](200)  ,  
 @Description [varchar](max)  ,    
 @CreatedBy  [nvarchar](128)  ,     
 @Status [int] ,  


  @MasterBoardId  bigint,
  @Strength  bigint,
  @ITIncharge  [nvarchar](200)  ,  

 @IPaddress [varchar](50) ,  
 @Action int ,--0 insert ,1 update, 2 delete  
 @result   int  output ,      
 @IId [nvarchar](128) output ,  
 @IImage  varchar(500) output,  
 @Message varchar(500) output  
 )            
As            
BEGIN        
 begin transaction    
 declare @isexist int,@ShortCode [nvarchar](150) ,@DisplayOrder [smallint]    
    
 set @Title  =ltrim(rtrim(isnull(@Title,'')))  
 set @EmailId =ltrim(rtrim(isnull(@EmailId,'')))  
 set @Logo  =ltrim(rtrim(isnull(@Logo,'')))  
 set @ContactNo =ltrim(rtrim(isnull(@ContactNo,'')))  
 set @AlterNateContactNo =ltrim(rtrim(isnull(@AlterNateContactNo,'')))  
 set @Principle =ltrim(rtrim(isnull(@Principle,'')))  
 set @PrincipleContactNo =ltrim(rtrim(isnull(@PrincipleContactNo,'')))  
 set @AddressLine1 =ltrim(rtrim(isnull(@AddressLine1,'')))  
 set @AddressLine2 =ltrim(rtrim(isnull(@AddressLine2,'')))  
 set @AddressLine3 =ltrim(rtrim(isnull(@AddressLine3,'')))  
 set @State=ltrim(rtrim(isnull(@State,'')))  
 set @City=ltrim(rtrim(isnull(@City,'')))  
 set @Pincode =ltrim(rtrim(isnull(@Pincode,'')))  
 set @Description =ltrim(rtrim(isnull(@Description,'')))  
  set @Strength =ltrim(rtrim(isnull(@Strength,0)))  
 set @ITIncharge =ltrim(rtrim(isnull(@ITIncharge,'')))  

  
    
 BEGIN TRY      
 declare @_image [varchar](150),@_bimage [varchar](150)  
 select @_image=  isnull(Logo,''),@AspNetUserId=AspNetUserId  from  [dbo].School where Id =@Id  
   if @Action=0  
   begin    
  set @ShortCode =dbo.[GetSchoolCode](dbo.fnNameAbbrevation(ltrim(rtrim(isnull(@Title ,'')))))  
  set @AspNetUserId=newid()   
  INSERT INTO [dbo].[AspNetUsers] ([Id],[FirstName],[LastName],[Gender],[DOB],[MobNo] ,[EmailId],[SecurityQuestion]
            ,[SecurityAnswer],[eUserName],[ePassword],[MobValidate],[EmailValidate] ,[LoginMode],[LoginThirdParty],
			[LoginSourse] ,[LastLogin],[Image],[dtmCreate],[dtmUpdate],[dtmDelete] ,[Status],[TimeZone],[AccessLevels]  ,
			[DisplayOrder],[Email] ,[EmailConfirmed],[PasswordHash],[SecurityStamp],[PhoneNumber] ,[PhoneNumberConfirmed]
           ,[TwoFactorEnabled],[LockoutEndDateUtc] ,[LockoutEnabled],[AccessFailedCount] ,[UserName])
		   values (@AspNetUserId,@title,'',-1,'1-1-1900',@ContactNo ,@EmailId,'What is first name?'
            ,@title,@ShortCode,@Password,0,0 ,-1,0,
			3 ,getdate(),'',getdate(),getdate(),null,1,'',''  ,
			0,@EmailId ,0,@Password,newid(),@ContactNo ,0
           ,0,'1-1-1900' ,0,0 ,@ShortCode)
  
  INSERT INTO [dbo].[AspNetUserRoles]  
  ([UserId] ,[RoleId])  
  VALUES  
  (@AspNetUserId,'092cac24-7b87-47e1-b5c3-4cbd9f9ff3ac' )  
  
  INSERT INTO [dbo].School  
  ([Id],[AspNetUserId],[Title],[SchoolCode],[EmailId],[Logo],[ContactNo],[AlterNateContactNo],[Principle],  
  [PrincipleContactNo],[AddressLine1],[AddressLine2],[AddressLine3],[State],[City],[Pincode],[Description],  
  [CreateDate],[UpdatedDate],[CreatedBy],[UpdatedBy],[IPAddress] ,[Status],[MasterBoardId],[Strength],[ITIncharge])  
  VALUES (newId(),@AspNetUserId,@Title,@ShortCode,@EmailId,@Logo,@ContactNo,@AlterNateContactNo,@Principle,  
  @PrincipleContactNo,@AddressLine1,@AddressLine2,@AddressLine3,@State,@City,@Pincode,@Description,  
  getdate(),getdate(),@CreatedBy,@CreatedBy,@IPAddress ,1,@MasterBoardId,@Strength,@ITIncharge)  
  set @IImage=''  
  set @IId=@Id   
  set @Message=isnull(@Title,'') +' inserted successfully.'  
  set @result =1   
   end  
   if @Action=1  
   begin   
  if @Logo='' and @_image<>''  
  begin  
   set @Logo=@_image  
   set @IImage=@_image  
  end   
  Update  [dbo].School  
  set  [Title]=@Title,  
  [EmailId]=@EmailId,  
  [Logo]=@Logo,  
  [ContactNo]=@ContactNo,  
  [AlterNateContactNo]=@AlterNateContactNo,  
  [Principle]=@Principle,  
  [PrincipleContactNo]=@PrincipleContactNo,  
  [AddressLine1]=@AddressLine1,  
  [AddressLine2]=@AddressLine2,  
  [AddressLine3]=@AddressLine3,  
  [State]=@State,  
  [City]=@City,  
  [Pincode]=@Pincode,  
  [Description]=@Description,   
  [UpdatedBy]=@CreatedBy,    
  [UpdatedDate] =getdate(),   
  [IPaddress] =@IPaddress  ,
  [MasterBoardId]=@MasterBoardId,
  [Strength]=@Strength,
  [ITIncharge]=@ITIncharge
  where Id=@Id    
  set @IId=@Id   
  set @Message=isnull(@Title,'') +' updated successfully.'  
  set @result =1  
   end  
   if @Action=2  
   begin   
    if not exists(select Id from AspNetUsers where Id=@AspNetUserId )      
 begin  
  delete from School where Id=@Id  
  set @IImage=@_image   
  set @IId=@Id   
  set @Message=isnull(@Title,'') +' deleted successfully.'  
  set @result =1  
 end   
 else  
 begin  
  set @IImage=''  
  set @IId=@Id   
  set @Message='you are not allowed to be delete school :'+@Title+', it is used by another process.'  
  set @result =-1  
 end   
   end  
   commit transaction        
      
 END TRY              
 BEGIN CATCH             
 set @result=-1             
 set @Message=ERROR_MESSAGE()  
 set @IId =''    
 set @IImage =''  
  --SELECT ERROR_NUMBER() AS ErrorNumber            
  -- ,ERROR_SEVERITY() AS ErrorSeverity            
  -- ,ERROR_STATE() AS ErrorState            
  -- ,ERROR_PROCEDURE() AS ErrorProcedure            
  -- ,ERROR_LINE() AS ErrorLine            
  -- ,ERROR_MESSAGE() AS ErrorMessage               
  rollback transaction              
 END CATCH             
   return --return from procedure successfully               
END   
  
GO
/****** Object:  StoredProcedure [dbo].[InsertUpdateStudent]    Script Date: 19-06-2023 09:02:50 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
         
           
CREATE  PROCEDURE  [dbo].[InsertUpdateStudent]                    
 (             
  @Id [nvarchar](128)  ,          
  @MasterClassId bigint  ,          
  @MasterBoardId bigint  ,          
  @SchoolId  [nvarchar](128)  ,          
  @Name [nvarchar](500),         
  @RollNo varchar(50),        
  @Session varchar(50),        
  @ContactNo varchar(50),        
  @Address [nvarchar](500) ,        
  @EmailId  [nvarchar](200)  ,         
  @ExpiyDate datetime,        
  @Gender int,         
  @DOB datetime  ,          
  @Password [nvarchar](200)  ,            
  @CreatedBy  [nvarchar](128)  ,             
  @Status [int] ,          
  @IPaddress [varchar](50) ,
  @AdmissionNo	nvarchar(200)	 ,
  @AccountCode	nvarchar(200)	,
  @ParentName	nvarchar(500)	,        
  @Action int ,--0 insert ,1 update, 2 delete          
  @result   int  output ,              
  @IId [nvarchar](128) output ,          
  @IImage  varchar(500) output,          
  @Message varchar(500) output          
 )                    
As                    
BEGIN                
 begin transaction            
 declare    @UserDetailId nvarchar(128), @schoolname nvarchar(1000),  @isexist int,@UserCode [nvarchar](200) ,@DisplayOrder [smallint] ,@AspNetUserId nvarchar(128)           
 set @Name  =ltrim(rtrim(isnull(@Name,'')))          
 set @EmailId =ltrim(rtrim(isnull(@EmailId,'')))          
 set @ContactNo =ltrim(rtrim(isnull(@ContactNo,'')))          
 set @RollNo =ltrim(rtrim(isnull(@RollNo,'')))          
 set @Session =ltrim(rtrim(isnull(@Session,'')))          
 set @Address =ltrim(rtrim(isnull(@Address,'')))          
 set @EmailId =ltrim(rtrim(isnull(@EmailId,'')))          
 set @Gender =ltrim(rtrim(isnull(@Gender,-1)))          
 set @DOB =ltrim(rtrim(isnull(@DOB,'1-1-1900')))
 set @AdmissionNo =ltrim(rtrim(isnull(@AdmissionNo,''))) 
 set @AccountCode =ltrim(rtrim(isnull(@AccountCode,''))) 
 set @ParentName =ltrim(rtrim(isnull(@ParentName,'')))  
 select @schoolname=isnull(Title,'') From [dbo].[School] where Id=@SchoolId        
       
 BEGIN TRY              
          
   if @Action=0          
   begin            
   set @UserCode =dbo.GetStudentCode(dbo.fnNameAbbrevation(ltrim(rtrim(isnull(@Name ,'')))))          
   set @AspNetUserId=newid()           
   INSERT INTO [dbo].[AspNetUsers] ([Id],[FirstName],[LastName],[Gender],[DOB],[MobNo] ,[EmailId],[SecurityQuestion]        
   ,[SecurityAnswer],[eUserName],[ePassword],[MobValidate],[EmailValidate] ,[LoginMode],[LoginThirdParty],        
   [LoginSourse] ,[LastLogin],[Image],[dtmCreate],[dtmUpdate],[dtmDelete] ,[Status],[TimeZone],[AccessLevels]  ,        
   [DisplayOrder],[Email] ,[EmailConfirmed],[PasswordHash],[SecurityStamp],[PhoneNumber] ,[PhoneNumberConfirmed]        
   ,[TwoFactorEnabled],[LockoutEndDateUtc] ,[LockoutEnabled],[AccessFailedCount] ,[UserName])        
   values (@AspNetUserId,@Name,'',@Gender,@DOB,@ContactNo ,@EmailId,'Wahat is your name?'        
   ,@Name,@UserCode,@Password,0,0 ,-1,0,        
   3 ,getdate(),'',getdate(),getdate(),null,1,'',''  ,        
   0,@EmailId ,0,@Password,newid(),@ContactNo ,0        
   ,0,'1-1-1900' ,0,0 ,@UserCode)        
          
   INSERT INTO [dbo].[AspNetUserRoles]          
   ([UserId] ,[RoleId])          
   VALUES    (@AspNetUserId,'06d971e6-7b5d-4ba9-9269-dc3ff5f2c00b' )          
        
   INSERT INTO [dbo].[UserDetail]        
   ([UseDetailId],[AspNetUserId],[MasterClassId],[MasterBoardId],[SchoolId],[UserCode],[Name],[RollNo],        
   [Session],[ContactNo],[Address],[ExpiyDate],[CreatedDate],[CreatedBy],[UpdatedBy],[IpAddress], AdmissionNo , AccountCode,  ParentName  )        
  values(newid(),@AspNetUserId,@MasterClassId,@MasterBoardId,@SchoolId,@UserCode,@Name,@RollNo,        
   @Session,@ContactNo,@Address,@ExpiyDate,getdate(),@CreatedBy,@CreatedBy,@IpAddress,
   @AdmissionNo , @AccountCode,  @ParentName   )   
   set @IImage=''          
   set @IId=@Id           
   set @Message=''+@schoolname+' student '+isnull(@Name,'') +'-'+@UserCode+' inserted successfully.'          
   set @result =1           
   end          
   if @Action=1          
   begin           
   Update  [dbo].[AspNetUsers]          
   set  [FirstName]=@Name,          
   [MobNo]=@ContactNo,   
   [Email]=@EmailId,  
   [DOB]=@DOB,
   Gender=@Gender,
   EmailId=@EmailId,  
   [PhoneNumber]=@ContactNo,         
   [dtmUpdate] =getdate()          
   where Id=@Id   
   select @UserDetailId=UseDetailId, @UserCode=UserCode from  [dbo].[UserDetail] where AspNetUserId=@Id     
   Update   [dbo].[UserDetail]        
   set [MasterClassId]=@MasterClassId,        
   [MasterBoardId]=@MasterBoardId,        
   [SchoolId]=@SchoolId,        
   [Name]=@Name,        
   [RollNo]=@RollNo,        
   [Session]=@Session,        
   [ContactNo]=@ContactNo,        
   [Address]=@Address,        
   [ExpiyDate]=@ExpiyDate,         
   [UpdatedBy]=@CreatedBy,        
   [IpAddress]=@IPaddress  , 
   AdmissionNo=@AdmissionNo , 
   AccountCode=@AccountCode,  
   ParentName=@ParentName     
   where  UseDetailId=@UserDetailId    
   set @IImage=''          
   set @IId=@Id           
   set @Message=''+@schoolname+' student '+isnull(@Name,'') +'-'+@UserCode+' updated successfully.'     
   set @result =1           
   end          
   if @Action=2          
   begin              
 select @UserDetailId=UseDetailId, @UserCode=UserCode,@Name=[Name] from  [dbo].[UserDetail]   
 where AspNetUserId=@Id        
 delete   from  [dbo].[UserDetail] where UseDetailId=@UserDetailId         
 delete   from  [dbo].[AspNetUsers] where Id=@AspNetUserId   
 set @IImage=''          
 set @IId=@Id           
 set @Message=''+@schoolname+' student '+isnull(@Name,'') +'-'+@UserCode+' deleted successfully.'     
 set @result =1           
   end          
   commit transaction          
 END TRY                      
 BEGIN CATCH                     
  
 set @result=-1                     
 set @Message=ERROR_MESSAGE()          
 set @IId =''            
 set @IImage =''          
  --SELECT ERROR_NUMBER() AS ErrorNumber                    
  -- ,ERROR_SEVERITY() AS ErrorSeverity                    
  -- ,ERROR_STATE() AS ErrorState                    
  -- ,ERROR_PROCEDURE() AS ErrorProcedure                    
  -- ,ERROR_LINE() AS ErrorLine                    
  -- ,ERROR_MESSAGE() AS ErrorMessage                       
  rollback transaction                      
 END CATCH                     
   return --return from procedure successfully                       
END 
GO
/****** Object:  StoredProcedure [dbo].[InserUserExcelMetaData]    Script Date: 19-06-2023 09:02:50 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE  PROCEDURE  [dbo].[InserUserExcelMetaData]                
 (       
 @AspNetUserId nvarchar(128),  
 @FileName [nvarchar](500) ,  
 @SheetName [nvarchar](500) ,  
 @UploadedFileName [nvarchar](500) ,  
 @Rows [int] ,  
 @Cols [int] ,  
 @FileMetaData [nvarchar](1000) ,  
 @Description [nvarchar](1000) ,  
 @Students udtStudent READONLY,  
 @CreatedBy nvarchar(128),    
 @IPAddress varchar(50),   
 @UserExcelMetaDataId  nvarchar(128) output,    
 @result   int  output ,     
 @Message varchar(500) output    
 )                
As                
BEGIN            
 begin transaction        
 declare @countrows int       
 BEGIN TRY    
  
       
  set @FileName  =isnull(@FileName,'')  
  set @SheetName  =isnull(@SheetName,'')  
  set @UploadedFileName =isnull(@UploadedFileName,'')  
  set @Rows  =isnull(@Rows,0)  
  set @Cols  =isnull(@Cols,0)  
  set @FileMetaData  =isnull(@FileMetaData,'')  
  set @Description =isnull(@Description,'')  
  set @UserExcelMetaDataId=newid()  
  
  if @Description=''  
  begin  
   select @Description=ltrim(rtrim(Firstname +' '+LastName)) +'-'+cast(getdate() as varchar(12))  from AspNetusers where Id=@CreatedBy  
  end   
  

  Update   [UserExcelMetaData]
  set Status=-2
  where Status=0

  INSERT INTO [dbo].[UserExcelMetaData]  
  ([Id],[AspNetUserId],[FileName],[SheetName],[UploadedFileName],[Rows],[Cols],LoopCount,[FileMetaData],  
  [Description],[CreateDate],[UpdatedDate],[CreatedBy],[UpdatedBy],[IPAddress],[Status])   
  values (@UserExcelMetaDataId,@AspNetUserId,@FileName,@SheetName,@UploadedFileName,@Rows,@Cols,1,@FileMetaData,  
  @Description,getdate(),getdate(),@CreatedBy,@CreatedBy,@IPAddress,1)   
    
     
  INSERT INTO [dbo].[UserExcelData]  
  ([Id],[AspNetUserId],[UserExcelMetaDataId],[Name],[Class],[RollNo],[Session],Board,[Password],[CreateDate],  
  [UpdatedDate],[CreatedBy],[UpdatedBy],[IPAddress],[Status],  AdmissionNo,AccountCode,AccountName,ParentName,DateOfBirth ) 

  select NEWID(),NEWID(),@UserExcelMetaDataId,s.[Name],s.[Class],s.[RollNo],s.[Session],  
  s.[Board],s.[Password],getdate(),  
  getdate(),@CreatedBy,@CreatedBy,@IPAddress,-1,s.AdmissionNo,s.AccountCode,s.AccountName,s.ParentName,s.DateOfBirth  from @Students s   
  
  if @@ROWCOUNT=0  
  begin  
   delete from [dbo].[UserExcelMetaData] where Id=@UserExcelMetaDataId  
   set @UserExcelMetaDataId=''  
   set @Message =  'you are inserting duplicate excel . Please upload correct excel'      
   set @result =2          
  end  
  else  
  begin  
  select @countrows=count(1) from [dbo].[UserExcelData] where UserExcelMetaDataId=@UserExcelMetaDataId  
  set @Message =  'you are inserted  rows-'+cast(@countrows as varchar)+' successfully.'      
  set @result =1          
  end   
  commit transaction                  
 END TRY                  
 BEGIN CATCH                 
  set @result=-1   
  set @UserExcelMetaDataId=''  
  set @Message=ERROR_MESSAGE()  
  --SELECT ERROR_NUMBER() AS ErrorNumber                
  -- ,ERROR_SEVERITY() AS ErrorSeverity                
  -- ,ERROR_STATE() AS ErrorState                
  -- ,ERROR_PROCEDURE() AS ErrorProcedure                
  -- ,ERROR_LINE() AS ErrorLine                
  -- ,ERROR_MESSAGE() AS ErrorMessage                   
  rollback transaction                  
 END CATCH                 
 return --return from procedure successfully                   
END   
  

GO
/****** Object:  StoredProcedure [dbo].[ReadBook]    Script Date: 19-06-2023 09:02:50 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
CREATE procedure [dbo].[ReadBook]    
(    
	 @AspNetUserId nvarchar(128),    
	 @BookId nvarchar(128)  
)    
AS    
BEGIN    
SET FMTONLY OFF  ;  
	 
	 WITH  cteMyLibrary AS    
	(    
		 select MasterBookId  From [dbo].[MyLibrary] where MasterBookId=@BookId and  AspNetUserId=@AspNetUserId
	) ,
	cteBook as(
		select [Id],isnull([MasterCategoryId],0)[MasterCategoryId],
		isnull(EBookPrice,0)EBookPrice,
		isnull([Title],'')[Title] ,isnull([Author],'')[Author],
		isnull([ISBN],'')[ISBN],isnull([Edition],'')[Edition] ,isnull([Image],'')[Image] , isnull([EncriptionKey],'')[EncriptionKey]
		from MasterBooks where Id in (select MasterBookId from cteMyLibrary )
	) 
	  select [Id],  [MasterCategoryId], EBookPrice, [Title] ,[Author],[ISBN],[Edition] ,
	  [Image] ,[EncriptionKey] from cteBook   order by [Title] asc
END    
GO
/****** Object:  StoredProcedure [dbo].[ReadBooks]    Script Date: 19-06-2023 09:02:50 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
Create procedure [dbo].[ReadBooks]    
(    
	 @AspNetUserId nvarchar(128) 
)    
AS    
BEGIN    
SET FMTONLY OFF  ;  
	 
	 WITH  cteMyLibrary AS    
	(    
		 select MasterBookId  From [dbo].[MyLibrary] where   AspNetUserId=@AspNetUserId
	) ,
	cteBook as(
		select [Id],isnull([MasterCategoryId],0)[MasterCategoryId],
		isnull(EBookPrice,0)EBookPrice,
		isnull([Title],'')[Title] ,isnull([Author],'')[Author],
		isnull([ISBN],'')[ISBN],isnull([Edition],'')[Edition] ,isnull([Image],'')[Image] , isnull([EncriptionKey],'')[EncriptionKey]
		from MasterBooks where Id in (select MasterBookId from cteMyLibrary )
	) 
	  select [Id],  [MasterCategoryId], EBookPrice, [Title] ,[Author],[ISBN],[Edition] ,
	  [Image] ,[EncriptionKey] from cteBook   order by [Title] asc
END    
GO
/****** Object:  StoredProcedure [dbo].[SchoolReadBook]    Script Date: 19-06-2023 09:02:50 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
Create procedure [dbo].[SchoolReadBook]    
(    
	 @AspNetUserId nvarchar(128),    
	 @BookId nvarchar(128)  
)    
AS    
BEGIN    
SET FMTONLY OFF  ;  
	 
	 WITH  cteMyLibrary AS    
	(    
		 select Id MasterBookId  From [dbo].MasterBooks where Id=@BookId  
	) ,
	cteBook as(
		select [Id],isnull([MasterCategoryId],0)[MasterCategoryId],
		isnull(EBookPrice,0)EBookPrice,
		isnull([Title],'')[Title] ,isnull([Author],'')[Author],
		isnull([ISBN],'')[ISBN],isnull([Edition],'')[Edition] ,isnull([Image],'')[Image] , isnull([EncriptionKey],'')[EncriptionKey]
		from MasterBooks where Id in (select MasterBookId from cteMyLibrary )
	) 
	  select [Id],  [MasterCategoryId], EBookPrice, [Title] ,[Author],[ISBN],[Edition] ,
	  [Image] ,[EncriptionKey] from cteBook   order by [Title] asc
END    
GO
/****** Object:  StoredProcedure [dbo].[StudentReadBook]    Script Date: 19-06-2023 09:02:50 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
   
CREATE procedure [dbo].[StudentReadBook]      
(      
  @AspNetUserId nvarchar(128),      
  @BookId nvarchar(128)    
)      
AS      
BEGIN      
SET FMTONLY OFF  ;    
    
  WITH  cteMyLibrary AS      
 (      
   select MasterClassId,MasterBoardId  From [dbo].UserDetail where AspNetUserId=@AspNetUserId    
 ) ,  
 cteBook as(  
  select [Id],isnull([MasterCategoryId],0)[MasterCategoryId],  
  isnull(EBookPrice,0)EBookPrice,  
  isnull([Title],'')[Title] ,isnull([Author],'')[Author],  
  isnull([ISBN],'')[ISBN],isnull([Edition],'')[Edition] ,isnull([Image],'')[Image] , isnull([EncriptionKey],'')[EncriptionKey]  
  from MasterBooks where MasterClassId in (select MasterClassId from cteMyLibrary ) 
  and MasterBoardId in (select MasterBoardId from cteMyLibrary ) 
 )   
   select [Id],  [MasterCategoryId], EBookPrice, [Title] ,[Author],[ISBN],[Edition] ,  
   [Image] ,[EncriptionKey] from cteBook  where Id=@BookId    
END 
GO
